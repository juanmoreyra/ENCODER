
ENCODER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ef0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013b0  08002ffc  08002ffc  00012ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043ac  080043ac  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  080043ac  080043ac  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  080043ac  080043ac  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043ac  080043ac  000143ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043b0  080043b0  000143b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080043b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a4  20000084  08004438  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000528  08004438  00020528  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007a64  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000191c  00000000  00000000  00027b11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000818  00000000  00000000  00029430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000758  00000000  00000000  00029c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176c0  00000000  00000000  0002a3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ac28  00000000  00000000  00041a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082dae  00000000  00000000  0004c688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf436  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002384  00000000  00000000  000cf488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	08002fe4 	.word	0x08002fe4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	08002fe4 	.word	0x08002fe4

0800014c <enc_fsm>:
	ENC_11,
	ENC_MAX_INPUT = ENC_11
} enc_input_t;
static volatile enc_state_t enc_state = ENC_IDLE;

static void enc_fsm(enc_state_t *state, enc_input_t input) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	70fb      	strb	r3, [r7, #3]
	if (*state < ENC_MIN_STATE || *state > ENC_MAX_STATE)
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	781b      	ldrb	r3, [r3, #0]
 800015c:	2b06      	cmp	r3, #6
 800015e:	f200 80ea 	bhi.w	8000336 <enc_fsm+0x1ea>
		return;
	if (input < ENC_MIN_INPUT || input > ENC_MAX_INPUT)
 8000162:	78fb      	ldrb	r3, [r7, #3]
 8000164:	2b03      	cmp	r3, #3
 8000166:	f200 80e8 	bhi.w	800033a <enc_fsm+0x1ee>
		return;
	switch (*state) {
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	781b      	ldrb	r3, [r3, #0]
 800016e:	2b06      	cmp	r3, #6
 8000170:	f200 80f2 	bhi.w	8000358 <enc_fsm+0x20c>
 8000174:	a201      	add	r2, pc, #4	; (adr r2, 800017c <enc_fsm+0x30>)
 8000176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800017a:	bf00      	nop
 800017c:	08000199 	.word	0x08000199
 8000180:	080001cd 	.word	0x080001cd
 8000184:	08000201 	.word	0x08000201
 8000188:	0800023d 	.word	0x0800023d
 800018c:	08000287 	.word	0x08000287
 8000190:	080002b9 	.word	0x080002b9
 8000194:	080002f1 	.word	0x080002f1
	case ENC_IDLE:
		switch (input) {
 8000198:	78fb      	ldrb	r3, [r7, #3]
 800019a:	2b03      	cmp	r3, #3
 800019c:	f200 80cf 	bhi.w	800033e <enc_fsm+0x1f2>
 80001a0:	a201      	add	r2, pc, #4	; (adr r2, 80001a8 <enc_fsm+0x5c>)
 80001a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001a6:	bf00      	nop
 80001a8:	080001c9 	.word	0x080001c9
 80001ac:	080001b9 	.word	0x080001b9
 80001b0:	080001c1 	.word	0x080001c1
 80001b4:	080001c9 	.word	0x080001c9
		case ENC_01:
			*state = ENC_CW01;
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	2201      	movs	r2, #1
 80001bc:	701a      	strb	r2, [r3, #0]
			break;
 80001be:	e004      	b.n	80001ca <enc_fsm+0x7e>
		case ENC_10:
			*state = ENC_CCW10;
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	2204      	movs	r2, #4
 80001c4:	701a      	strb	r2, [r3, #0]
			break;
 80001c6:	e000      	b.n	80001ca <enc_fsm+0x7e>
		case ENC_00:
			break;
 80001c8:	bf00      	nop
		case ENC_11:
			break;
		}
		break;
 80001ca:	e0b8      	b.n	800033e <enc_fsm+0x1f2>
		/*************** CW *****************/
	case ENC_CW01:
		switch (input) {
 80001cc:	78fb      	ldrb	r3, [r7, #3]
 80001ce:	2b03      	cmp	r3, #3
 80001d0:	f200 80b7 	bhi.w	8000342 <enc_fsm+0x1f6>
 80001d4:	a201      	add	r2, pc, #4	; (adr r2, 80001dc <enc_fsm+0x90>)
 80001d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001da:	bf00      	nop
 80001dc:	080001f5 	.word	0x080001f5
 80001e0:	080001fd 	.word	0x080001fd
 80001e4:	080001fd 	.word	0x080001fd
 80001e8:	080001ed 	.word	0x080001ed
		case ENC_11:
			*state = ENC_IDLE;
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	2200      	movs	r2, #0
 80001f0:	701a      	strb	r2, [r3, #0]
			break;
 80001f2:	e004      	b.n	80001fe <enc_fsm+0xb2>
		case ENC_00:
			*state = ENC_CW00;
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	2202      	movs	r2, #2
 80001f8:	701a      	strb	r2, [r3, #0]
			break;
 80001fa:	e000      	b.n	80001fe <enc_fsm+0xb2>
		case ENC_01:
			break;
 80001fc:	bf00      	nop
		case ENC_10:
			break;
		}
		break;
 80001fe:	e0a0      	b.n	8000342 <enc_fsm+0x1f6>
	case ENC_CW00:
		switch (input) {
 8000200:	78fb      	ldrb	r3, [r7, #3]
 8000202:	2b03      	cmp	r3, #3
 8000204:	f200 809f 	bhi.w	8000346 <enc_fsm+0x1fa>
 8000208:	a201      	add	r2, pc, #4	; (adr r2, 8000210 <enc_fsm+0xc4>)
 800020a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800020e:	bf00      	nop
 8000210:	08000239 	.word	0x08000239
 8000214:	08000229 	.word	0x08000229
 8000218:	08000231 	.word	0x08000231
 800021c:	08000221 	.word	0x08000221
		case ENC_11:
			*state = ENC_IDLE;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	2200      	movs	r2, #0
 8000224:	701a      	strb	r2, [r3, #0]
			break;
 8000226:	e008      	b.n	800023a <enc_fsm+0xee>
		case ENC_01:
			*state = ENC_CW01;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2201      	movs	r2, #1
 800022c:	701a      	strb	r2, [r3, #0]
			break;
 800022e:	e004      	b.n	800023a <enc_fsm+0xee>
		case ENC_10:
			*state = ENC_CW10;
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	2203      	movs	r2, #3
 8000234:	701a      	strb	r2, [r3, #0]
			break;
 8000236:	e000      	b.n	800023a <enc_fsm+0xee>
		case ENC_00:
			break;
 8000238:	bf00      	nop
		}
		break;
 800023a:	e084      	b.n	8000346 <enc_fsm+0x1fa>
	case ENC_CW10:
		switch (input) {
 800023c:	78fb      	ldrb	r3, [r7, #3]
 800023e:	2b03      	cmp	r3, #3
 8000240:	f200 8083 	bhi.w	800034a <enc_fsm+0x1fe>
 8000244:	a201      	add	r2, pc, #4	; (adr r2, 800024c <enc_fsm+0x100>)
 8000246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800024a:	bf00      	nop
 800024c:	0800027b 	.word	0x0800027b
 8000250:	08000283 	.word	0x08000283
 8000254:	08000283 	.word	0x08000283
 8000258:	0800025d 	.word	0x0800025d
		case ENC_11:
			if (enc_value < enc_max)
 800025c:	4b40      	ldr	r3, [pc, #256]	; (8000360 <enc_fsm+0x214>)
 800025e:	681a      	ldr	r2, [r3, #0]
 8000260:	4b40      	ldr	r3, [pc, #256]	; (8000364 <enc_fsm+0x218>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	429a      	cmp	r2, r3
 8000266:	da04      	bge.n	8000272 <enc_fsm+0x126>
				enc_value++;
 8000268:	4b3d      	ldr	r3, [pc, #244]	; (8000360 <enc_fsm+0x214>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	3301      	adds	r3, #1
 800026e:	4a3c      	ldr	r2, [pc, #240]	; (8000360 <enc_fsm+0x214>)
 8000270:	6013      	str	r3, [r2, #0]
			*state = ENC_IDLE;
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	2200      	movs	r2, #0
 8000276:	701a      	strb	r2, [r3, #0]
			break;
 8000278:	e004      	b.n	8000284 <enc_fsm+0x138>
		case ENC_00:
			*state = ENC_CW00;
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	2202      	movs	r2, #2
 800027e:	701a      	strb	r2, [r3, #0]
			break;
 8000280:	e000      	b.n	8000284 <enc_fsm+0x138>
		case ENC_01:
			break;
 8000282:	bf00      	nop
		case ENC_10:
			break;
		}
		break;
 8000284:	e061      	b.n	800034a <enc_fsm+0x1fe>
		/*************** CCW *****************/
	case ENC_CCW10:
		switch (input) {
 8000286:	78fb      	ldrb	r3, [r7, #3]
 8000288:	2b03      	cmp	r3, #3
 800028a:	d860      	bhi.n	800034e <enc_fsm+0x202>
 800028c:	a201      	add	r2, pc, #4	; (adr r2, 8000294 <enc_fsm+0x148>)
 800028e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000292:	bf00      	nop
 8000294:	080002ad 	.word	0x080002ad
 8000298:	080002b5 	.word	0x080002b5
 800029c:	080002b5 	.word	0x080002b5
 80002a0:	080002a5 	.word	0x080002a5
		case ENC_11:
			*state = ENC_IDLE;
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	2200      	movs	r2, #0
 80002a8:	701a      	strb	r2, [r3, #0]
			break;
 80002aa:	e004      	b.n	80002b6 <enc_fsm+0x16a>
		case ENC_00:
			*state = ENC_CCW00;
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2205      	movs	r2, #5
 80002b0:	701a      	strb	r2, [r3, #0]
			break;
 80002b2:	e000      	b.n	80002b6 <enc_fsm+0x16a>
		case ENC_01:
			break;
 80002b4:	bf00      	nop
		case ENC_10:
			break;
		}
		break;
 80002b6:	e04a      	b.n	800034e <enc_fsm+0x202>
	case ENC_CCW00:
		switch (input) {
 80002b8:	78fb      	ldrb	r3, [r7, #3]
 80002ba:	2b03      	cmp	r3, #3
 80002bc:	d849      	bhi.n	8000352 <enc_fsm+0x206>
 80002be:	a201      	add	r2, pc, #4	; (adr r2, 80002c4 <enc_fsm+0x178>)
 80002c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002c4:	080002ed 	.word	0x080002ed
 80002c8:	080002dd 	.word	0x080002dd
 80002cc:	080002e5 	.word	0x080002e5
 80002d0:	080002d5 	.word	0x080002d5
		case ENC_11:
			*state = ENC_IDLE;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	2200      	movs	r2, #0
 80002d8:	701a      	strb	r2, [r3, #0]
			break;
 80002da:	e008      	b.n	80002ee <enc_fsm+0x1a2>
		case ENC_01:
			*state = ENC_CCW01;
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	2206      	movs	r2, #6
 80002e0:	701a      	strb	r2, [r3, #0]
			break;
 80002e2:	e004      	b.n	80002ee <enc_fsm+0x1a2>
		case ENC_10:
			*state = ENC_CCW10;
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	2204      	movs	r2, #4
 80002e8:	701a      	strb	r2, [r3, #0]
			break;
 80002ea:	e000      	b.n	80002ee <enc_fsm+0x1a2>
		case ENC_00:
			break;
 80002ec:	bf00      	nop
		}
		break;
 80002ee:	e030      	b.n	8000352 <enc_fsm+0x206>
	case ENC_CCW01:
		switch (input) {
 80002f0:	78fb      	ldrb	r3, [r7, #3]
 80002f2:	2b03      	cmp	r3, #3
 80002f4:	d82f      	bhi.n	8000356 <enc_fsm+0x20a>
 80002f6:	a201      	add	r2, pc, #4	; (adr r2, 80002fc <enc_fsm+0x1b0>)
 80002f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002fc:	0800032b 	.word	0x0800032b
 8000300:	08000333 	.word	0x08000333
 8000304:	08000333 	.word	0x08000333
 8000308:	0800030d 	.word	0x0800030d
		case ENC_11:
			if (enc_value > enc_min)
 800030c:	4b14      	ldr	r3, [pc, #80]	; (8000360 <enc_fsm+0x214>)
 800030e:	681a      	ldr	r2, [r3, #0]
 8000310:	4b15      	ldr	r3, [pc, #84]	; (8000368 <enc_fsm+0x21c>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	429a      	cmp	r2, r3
 8000316:	dd04      	ble.n	8000322 <enc_fsm+0x1d6>
				enc_value--;
 8000318:	4b11      	ldr	r3, [pc, #68]	; (8000360 <enc_fsm+0x214>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	3b01      	subs	r3, #1
 800031e:	4a10      	ldr	r2, [pc, #64]	; (8000360 <enc_fsm+0x214>)
 8000320:	6013      	str	r3, [r2, #0]
			*state = ENC_IDLE;
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	2200      	movs	r2, #0
 8000326:	701a      	strb	r2, [r3, #0]
			break;
 8000328:	e004      	b.n	8000334 <enc_fsm+0x1e8>
		case ENC_00:
			*state = ENC_CCW00;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	2205      	movs	r2, #5
 800032e:	701a      	strb	r2, [r3, #0]
			break;
 8000330:	e000      	b.n	8000334 <enc_fsm+0x1e8>
		case ENC_01:
			break;
 8000332:	bf00      	nop
		case ENC_10:
			break;
		}
		break;
 8000334:	e00f      	b.n	8000356 <enc_fsm+0x20a>
		return;
 8000336:	bf00      	nop
 8000338:	e00e      	b.n	8000358 <enc_fsm+0x20c>
		return;
 800033a:	bf00      	nop
 800033c:	e00c      	b.n	8000358 <enc_fsm+0x20c>
		break;
 800033e:	bf00      	nop
 8000340:	e00a      	b.n	8000358 <enc_fsm+0x20c>
		break;
 8000342:	bf00      	nop
 8000344:	e008      	b.n	8000358 <enc_fsm+0x20c>
		break;
 8000346:	bf00      	nop
 8000348:	e006      	b.n	8000358 <enc_fsm+0x20c>
		break;
 800034a:	bf00      	nop
 800034c:	e004      	b.n	8000358 <enc_fsm+0x20c>
		break;
 800034e:	bf00      	nop
 8000350:	e002      	b.n	8000358 <enc_fsm+0x20c>
		break;
 8000352:	bf00      	nop
 8000354:	e000      	b.n	8000358 <enc_fsm+0x20c>
		break;
 8000356:	bf00      	nop
	}
}
 8000358:	370c      	adds	r7, #12
 800035a:	46bd      	mov	sp, r7
 800035c:	bc80      	pop	{r7}
 800035e:	4770      	bx	lr
 8000360:	200000a0 	.word	0x200000a0
 8000364:	20000004 	.word	0x20000004
 8000368:	20000000 	.word	0x20000000

0800036c <enc_init>:

void enc_init(int32_t minValue, int32_t maxValue) {
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	6039      	str	r1, [r7, #0]
	if (minValue < maxValue) {
 8000376:	687a      	ldr	r2, [r7, #4]
 8000378:	683b      	ldr	r3, [r7, #0]
 800037a:	429a      	cmp	r2, r3
 800037c:	da08      	bge.n	8000390 <enc_init+0x24>
		enc_min = enc_value = minValue;
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	4a0b      	ldr	r2, [pc, #44]	; (80003b0 <enc_init+0x44>)
 8000382:	6013      	str	r3, [r2, #0]
 8000384:	4a0b      	ldr	r2, [pc, #44]	; (80003b4 <enc_init+0x48>)
 8000386:	6013      	str	r3, [r2, #0]
		enc_max = maxValue;
 8000388:	4a0b      	ldr	r2, [pc, #44]	; (80003b8 <enc_init+0x4c>)
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	6013      	str	r3, [r2, #0]
 800038e:	e006      	b.n	800039e <enc_init+0x32>
	} else {
		enc_min = enc_max = enc_value = 0;
 8000390:	2300      	movs	r3, #0
 8000392:	4a07      	ldr	r2, [pc, #28]	; (80003b0 <enc_init+0x44>)
 8000394:	6013      	str	r3, [r2, #0]
 8000396:	4a08      	ldr	r2, [pc, #32]	; (80003b8 <enc_init+0x4c>)
 8000398:	6013      	str	r3, [r2, #0]
 800039a:	4a06      	ldr	r2, [pc, #24]	; (80003b4 <enc_init+0x48>)
 800039c:	6013      	str	r3, [r2, #0]
	}
	/* configura 2 GPIOs como entradas con pull-up
	 * se define en la capa de bajo nivel*/
	enc_gpioConfig();
 800039e:	f000 f839 	bl	8000414 <enc_gpioConfig>
	/* inicialización de la máquina de estados*/
	enc_state = ENC_IDLE;
 80003a2:	4b06      	ldr	r3, [pc, #24]	; (80003bc <enc_init+0x50>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	701a      	strb	r2, [r3, #0]
}
 80003a8:	bf00      	nop
 80003aa:	3708      	adds	r7, #8
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	200000a0 	.word	0x200000a0
 80003b4:	20000000 	.word	0x20000000
 80003b8:	20000004 	.word	0x20000004
 80003bc:	200000a4 	.word	0x200000a4

080003c0 <enc_process>:
void enc_process() {
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
	enc_input_t input;
	/* Lee los 2 GPIOs y devuelve un valor de la
	 * enumeración enc_input_t [0-3]
	 * se define en la capa de bajo nivel*/
	input = enc_getInputs();
 80003c6:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <enc_process+0x38>)
 80003c8:	689b      	ldr	r3, [r3, #8]
 80003ca:	089b      	lsrs	r3, r3, #2
 80003cc:	b2db      	uxtb	r3, r3
 80003ce:	f003 0301 	and.w	r3, r3, #1
 80003d2:	b2da      	uxtb	r2, r3
 80003d4:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <enc_process+0x38>)
 80003d6:	689b      	ldr	r3, [r3, #8]
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	f003 0302 	and.w	r3, r3, #2
 80003de:	b2db      	uxtb	r3, r3
 80003e0:	4413      	add	r3, r2
 80003e2:	71fb      	strb	r3, [r7, #7]
	/* ejecuta la fsm */
	enc_fsm(&enc_state, input);
 80003e4:	79fb      	ldrb	r3, [r7, #7]
 80003e6:	4619      	mov	r1, r3
 80003e8:	4804      	ldr	r0, [pc, #16]	; (80003fc <enc_process+0x3c>)
 80003ea:	f7ff feaf 	bl	800014c <enc_fsm>
}
 80003ee:	bf00      	nop
 80003f0:	3708      	adds	r7, #8
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	40010800 	.word	0x40010800
 80003fc:	200000a4 	.word	0x200000a4

08000400 <enc_getValue>:
int32_t enc_getValue() {
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
	return enc_value;
 8000404:	4b02      	ldr	r3, [pc, #8]	; (8000410 <enc_getValue+0x10>)
 8000406:	681b      	ldr	r3, [r3, #0]
}
 8000408:	4618      	mov	r0, r3
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr
 8000410:	200000a0 	.word	0x200000a0

08000414 <enc_gpioConfig>:
 *  Created on: Sep 28, 2022
 *      Author: Barcala
 */

#include "enc_ll.h"
void enc_gpioConfig() {
 8000414:	b580      	push	{r7, lr}
 8000416:	b08c      	sub	sp, #48	; 0x30
 8000418:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800041a:	f107 0320 	add.w	r3, r7, #32
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	605a      	str	r2, [r3, #4]
 8000424:	609a      	str	r2, [r3, #8]
 8000426:	60da      	str	r2, [r3, #12]
	/* HABILITA CLOCK DE PUERTOS USADOS
	 * CON LAS ENTRADAS A Y B */
	switch ((uint32_t) ENC_PORT_A) {
	case (uint32_t) GPIOA:
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000428:	4b1a      	ldr	r3, [pc, #104]	; (8000494 <enc_gpioConfig+0x80>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	4a19      	ldr	r2, [pc, #100]	; (8000494 <enc_gpioConfig+0x80>)
 800042e:	f043 0304 	orr.w	r3, r3, #4
 8000432:	6193      	str	r3, [r2, #24]
 8000434:	4b17      	ldr	r3, [pc, #92]	; (8000494 <enc_gpioConfig+0x80>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	f003 0304 	and.w	r3, r3, #4
 800043c:	61fb      	str	r3, [r7, #28]
 800043e:	69fb      	ldr	r3, [r7, #28]
		break;
 8000440:	bf00      	nop
	default:
		return;
	}
	switch ((uint32_t) ENC_PORT_B) {
	case (uint32_t) GPIOA:
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000442:	4b14      	ldr	r3, [pc, #80]	; (8000494 <enc_gpioConfig+0x80>)
 8000444:	699b      	ldr	r3, [r3, #24]
 8000446:	4a13      	ldr	r2, [pc, #76]	; (8000494 <enc_gpioConfig+0x80>)
 8000448:	f043 0304 	orr.w	r3, r3, #4
 800044c:	6193      	str	r3, [r2, #24]
 800044e:	4b11      	ldr	r3, [pc, #68]	; (8000494 <enc_gpioConfig+0x80>)
 8000450:	699b      	ldr	r3, [r3, #24]
 8000452:	f003 0304 	and.w	r3, r3, #4
 8000456:	60fb      	str	r3, [r7, #12]
 8000458:	68fb      	ldr	r3, [r7, #12]
		break;
 800045a:	bf00      	nop
		break;
	default:
		return;
	}
	/*Configura GPIO pins : ENC_A ENC_B */
	GPIO_InitStruct.Pin = (1 << ENC_PIN_A);
 800045c:	2302      	movs	r3, #2
 800045e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000460:	2300      	movs	r3, #0
 8000462:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000464:	2301      	movs	r3, #1
 8000466:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(ENC_PORT_A, &GPIO_InitStruct);
 8000468:	f107 0320 	add.w	r3, r7, #32
 800046c:	4619      	mov	r1, r3
 800046e:	480a      	ldr	r0, [pc, #40]	; (8000498 <enc_gpioConfig+0x84>)
 8000470:	f000 fe0a 	bl	8001088 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = (1 << ENC_PIN_B);
 8000474:	2304      	movs	r3, #4
 8000476:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000478:	2300      	movs	r3, #0
 800047a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800047c:	2301      	movs	r3, #1
 800047e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(ENC_PORT_B, &GPIO_InitStruct);
 8000480:	f107 0320 	add.w	r3, r7, #32
 8000484:	4619      	mov	r1, r3
 8000486:	4804      	ldr	r0, [pc, #16]	; (8000498 <enc_gpioConfig+0x84>)
 8000488:	f000 fdfe 	bl	8001088 <HAL_GPIO_Init>
}
 800048c:	3730      	adds	r7, #48	; 0x30
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	40021000 	.word	0x40021000
 8000498:	40010800 	.word	0x40010800

0800049c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a2:	f000 fcab 	bl	8000dfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a6:	f000 f837 	bl	8000518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004aa:	f000 f8a9 	bl	8000600 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004ae:	f000 f879 	bl	80005a4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  enc_init(0, 40);
 80004b2:	2128      	movs	r1, #40	; 0x28
 80004b4:	2000      	movs	r0, #0
 80004b6:	f7ff ff59 	bl	800036c <enc_init>
  SSD1306_Init();
 80004ba:	f000 f8e9 	bl	8000690 <SSD1306_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int32_t old_value=value;
 80004be:	4b12      	ldr	r3, [pc, #72]	; (8000508 <main+0x6c>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */
	  enc_process();
 80004c4:	f7ff ff7c 	bl	80003c0 <enc_process>
	  value=enc_getValue();
 80004c8:	f7ff ff9a 	bl	8000400 <enc_getValue>
 80004cc:	4603      	mov	r3, r0
 80004ce:	4a0e      	ldr	r2, [pc, #56]	; (8000508 <main+0x6c>)
 80004d0:	6013      	str	r3, [r2, #0]
	  if(old_value!=value){
 80004d2:	4b0d      	ldr	r3, [pc, #52]	; (8000508 <main+0x6c>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	687a      	ldr	r2, [r7, #4]
 80004d8:	429a      	cmp	r2, r3
 80004da:	d0f3      	beq.n	80004c4 <main+0x28>
		  old_value=value;
 80004dc:	4b0a      	ldr	r3, [pc, #40]	; (8000508 <main+0x6c>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	607b      	str	r3, [r7, #4]
		  sprintf(cadena,"%ldxxx",value);
 80004e2:	4b09      	ldr	r3, [pc, #36]	; (8000508 <main+0x6c>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	461a      	mov	r2, r3
 80004e8:	4908      	ldr	r1, [pc, #32]	; (800050c <main+0x70>)
 80004ea:	4809      	ldr	r0, [pc, #36]	; (8000510 <main+0x74>)
 80004ec:	f002 f900 	bl	80026f0 <siprintf>
		  SSD1306_GotoXY (10,10);
 80004f0:	210a      	movs	r1, #10
 80004f2:	200a      	movs	r0, #10
 80004f4:	f000 fa34 	bl	8000960 <SSD1306_GotoXY>
		  SSD1306_Puts (cadena, &Font_16x26, 1);
 80004f8:	2201      	movs	r2, #1
 80004fa:	4906      	ldr	r1, [pc, #24]	; (8000514 <main+0x78>)
 80004fc:	4804      	ldr	r0, [pc, #16]	; (8000510 <main+0x74>)
 80004fe:	f000 fac5 	bl	8000a8c <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 8000502:	f000 f989 	bl	8000818 <SSD1306_UpdateScreen>
	  enc_process();
 8000506:	e7dd      	b.n	80004c4 <main+0x28>
 8000508:	20000010 	.word	0x20000010
 800050c:	08002ffc 	.word	0x08002ffc
 8000510:	200000fc 	.word	0x200000fc
 8000514:	20000008 	.word	0x20000008

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b090      	sub	sp, #64	; 0x40
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	f107 0318 	add.w	r3, r7, #24
 8000522:	2228      	movs	r2, #40	; 0x28
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f002 f8da 	bl	80026e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	605a      	str	r2, [r3, #4]
 8000534:	609a      	str	r2, [r3, #8]
 8000536:	60da      	str	r2, [r3, #12]
 8000538:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800053a:	2301      	movs	r3, #1
 800053c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800053e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000542:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000544:	2300      	movs	r3, #0
 8000546:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000548:	2301      	movs	r3, #1
 800054a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800054c:	2302      	movs	r3, #2
 800054e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000550:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000554:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000556:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800055a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800055c:	f107 0318 	add.w	r3, r7, #24
 8000560:	4618      	mov	r0, r3
 8000562:	f001 fc8d 	bl	8001e80 <HAL_RCC_OscConfig>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800056c:	f000 f88a 	bl	8000684 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000570:	230f      	movs	r3, #15
 8000572:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000574:	2302      	movs	r3, #2
 8000576:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000578:	2300      	movs	r3, #0
 800057a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800057c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000580:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000582:	2300      	movs	r3, #0
 8000584:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	2102      	movs	r1, #2
 800058a:	4618      	mov	r0, r3
 800058c:	f001 fefa 	bl	8002384 <HAL_RCC_ClockConfig>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000596:	f000 f875 	bl	8000684 <Error_Handler>
  }
}
 800059a:	bf00      	nop
 800059c:	3740      	adds	r7, #64	; 0x40
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
	...

080005a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005a8:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <MX_I2C1_Init+0x50>)
 80005aa:	4a13      	ldr	r2, [pc, #76]	; (80005f8 <MX_I2C1_Init+0x54>)
 80005ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80005ae:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <MX_I2C1_Init+0x50>)
 80005b0:	4a12      	ldr	r2, [pc, #72]	; (80005fc <MX_I2C1_Init+0x58>)
 80005b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005b4:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <MX_I2C1_Init+0x50>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005ba:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <MX_I2C1_Init+0x50>)
 80005bc:	2200      	movs	r2, #0
 80005be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005c0:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <MX_I2C1_Init+0x50>)
 80005c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005c8:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <MX_I2C1_Init+0x50>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <MX_I2C1_Init+0x50>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005d4:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <MX_I2C1_Init+0x50>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005da:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <MX_I2C1_Init+0x50>)
 80005dc:	2200      	movs	r2, #0
 80005de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005e0:	4804      	ldr	r0, [pc, #16]	; (80005f4 <MX_I2C1_Init+0x50>)
 80005e2:	f000 fed5 	bl	8001390 <HAL_I2C_Init>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005ec:	f000 f84a 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	200000a8 	.word	0x200000a8
 80005f8:	40005400 	.word	0x40005400
 80005fc:	00061a80 	.word	0x00061a80

08000600 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b088      	sub	sp, #32
 8000604:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000606:	f107 0310 	add.w	r3, r7, #16
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	609a      	str	r2, [r3, #8]
 8000612:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000614:	4b19      	ldr	r3, [pc, #100]	; (800067c <MX_GPIO_Init+0x7c>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	4a18      	ldr	r2, [pc, #96]	; (800067c <MX_GPIO_Init+0x7c>)
 800061a:	f043 0320 	orr.w	r3, r3, #32
 800061e:	6193      	str	r3, [r2, #24]
 8000620:	4b16      	ldr	r3, [pc, #88]	; (800067c <MX_GPIO_Init+0x7c>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	f003 0320 	and.w	r3, r3, #32
 8000628:	60fb      	str	r3, [r7, #12]
 800062a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062c:	4b13      	ldr	r3, [pc, #76]	; (800067c <MX_GPIO_Init+0x7c>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	4a12      	ldr	r2, [pc, #72]	; (800067c <MX_GPIO_Init+0x7c>)
 8000632:	f043 0304 	orr.w	r3, r3, #4
 8000636:	6193      	str	r3, [r2, #24]
 8000638:	4b10      	ldr	r3, [pc, #64]	; (800067c <MX_GPIO_Init+0x7c>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	f003 0304 	and.w	r3, r3, #4
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000644:	4b0d      	ldr	r3, [pc, #52]	; (800067c <MX_GPIO_Init+0x7c>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	4a0c      	ldr	r2, [pc, #48]	; (800067c <MX_GPIO_Init+0x7c>)
 800064a:	f043 0308 	orr.w	r3, r3, #8
 800064e:	6193      	str	r3, [r2, #24]
 8000650:	4b0a      	ldr	r3, [pc, #40]	; (800067c <MX_GPIO_Init+0x7c>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	f003 0308 	and.w	r3, r3, #8
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800065c:	2306      	movs	r3, #6
 800065e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000664:	2301      	movs	r3, #1
 8000666:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000668:	f107 0310 	add.w	r3, r7, #16
 800066c:	4619      	mov	r1, r3
 800066e:	4804      	ldr	r0, [pc, #16]	; (8000680 <MX_GPIO_Init+0x80>)
 8000670:	f000 fd0a 	bl	8001088 <HAL_GPIO_Init>

}
 8000674:	bf00      	nop
 8000676:	3720      	adds	r7, #32
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40021000 	.word	0x40021000
 8000680:	40010800 	.word	0x40010800

08000684 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000688:	b672      	cpsid	i
}
 800068a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800068c:	e7fe      	b.n	800068c <Error_Handler+0x8>
	...

08000690 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000696:	f000 fa1f 	bl	8000ad8 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800069a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800069e:	2201      	movs	r2, #1
 80006a0:	2178      	movs	r1, #120	; 0x78
 80006a2:	485b      	ldr	r0, [pc, #364]	; (8000810 <SSD1306_Init+0x180>)
 80006a4:	f001 f8b6 	bl	8001814 <HAL_I2C_IsDeviceReady>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	e0a9      	b.n	8000806 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80006b2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80006b6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80006b8:	e002      	b.n	80006c0 <SSD1306_Init+0x30>
		p--;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	3b01      	subs	r3, #1
 80006be:	607b      	str	r3, [r7, #4]
	while(p>0)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d1f9      	bne.n	80006ba <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80006c6:	22ae      	movs	r2, #174	; 0xae
 80006c8:	2100      	movs	r1, #0
 80006ca:	2078      	movs	r0, #120	; 0x78
 80006cc:	f000 fa7e 	bl	8000bcc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80006d0:	2220      	movs	r2, #32
 80006d2:	2100      	movs	r1, #0
 80006d4:	2078      	movs	r0, #120	; 0x78
 80006d6:	f000 fa79 	bl	8000bcc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80006da:	2210      	movs	r2, #16
 80006dc:	2100      	movs	r1, #0
 80006de:	2078      	movs	r0, #120	; 0x78
 80006e0:	f000 fa74 	bl	8000bcc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80006e4:	22b0      	movs	r2, #176	; 0xb0
 80006e6:	2100      	movs	r1, #0
 80006e8:	2078      	movs	r0, #120	; 0x78
 80006ea:	f000 fa6f 	bl	8000bcc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80006ee:	22c8      	movs	r2, #200	; 0xc8
 80006f0:	2100      	movs	r1, #0
 80006f2:	2078      	movs	r0, #120	; 0x78
 80006f4:	f000 fa6a 	bl	8000bcc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80006f8:	2200      	movs	r2, #0
 80006fa:	2100      	movs	r1, #0
 80006fc:	2078      	movs	r0, #120	; 0x78
 80006fe:	f000 fa65 	bl	8000bcc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000702:	2210      	movs	r2, #16
 8000704:	2100      	movs	r1, #0
 8000706:	2078      	movs	r0, #120	; 0x78
 8000708:	f000 fa60 	bl	8000bcc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800070c:	2240      	movs	r2, #64	; 0x40
 800070e:	2100      	movs	r1, #0
 8000710:	2078      	movs	r0, #120	; 0x78
 8000712:	f000 fa5b 	bl	8000bcc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000716:	2281      	movs	r2, #129	; 0x81
 8000718:	2100      	movs	r1, #0
 800071a:	2078      	movs	r0, #120	; 0x78
 800071c:	f000 fa56 	bl	8000bcc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000720:	22ff      	movs	r2, #255	; 0xff
 8000722:	2100      	movs	r1, #0
 8000724:	2078      	movs	r0, #120	; 0x78
 8000726:	f000 fa51 	bl	8000bcc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800072a:	22a1      	movs	r2, #161	; 0xa1
 800072c:	2100      	movs	r1, #0
 800072e:	2078      	movs	r0, #120	; 0x78
 8000730:	f000 fa4c 	bl	8000bcc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000734:	22a6      	movs	r2, #166	; 0xa6
 8000736:	2100      	movs	r1, #0
 8000738:	2078      	movs	r0, #120	; 0x78
 800073a:	f000 fa47 	bl	8000bcc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800073e:	22a8      	movs	r2, #168	; 0xa8
 8000740:	2100      	movs	r1, #0
 8000742:	2078      	movs	r0, #120	; 0x78
 8000744:	f000 fa42 	bl	8000bcc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000748:	223f      	movs	r2, #63	; 0x3f
 800074a:	2100      	movs	r1, #0
 800074c:	2078      	movs	r0, #120	; 0x78
 800074e:	f000 fa3d 	bl	8000bcc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000752:	22a4      	movs	r2, #164	; 0xa4
 8000754:	2100      	movs	r1, #0
 8000756:	2078      	movs	r0, #120	; 0x78
 8000758:	f000 fa38 	bl	8000bcc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800075c:	22d3      	movs	r2, #211	; 0xd3
 800075e:	2100      	movs	r1, #0
 8000760:	2078      	movs	r0, #120	; 0x78
 8000762:	f000 fa33 	bl	8000bcc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000766:	2200      	movs	r2, #0
 8000768:	2100      	movs	r1, #0
 800076a:	2078      	movs	r0, #120	; 0x78
 800076c:	f000 fa2e 	bl	8000bcc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000770:	22d5      	movs	r2, #213	; 0xd5
 8000772:	2100      	movs	r1, #0
 8000774:	2078      	movs	r0, #120	; 0x78
 8000776:	f000 fa29 	bl	8000bcc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800077a:	22f0      	movs	r2, #240	; 0xf0
 800077c:	2100      	movs	r1, #0
 800077e:	2078      	movs	r0, #120	; 0x78
 8000780:	f000 fa24 	bl	8000bcc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000784:	22d9      	movs	r2, #217	; 0xd9
 8000786:	2100      	movs	r1, #0
 8000788:	2078      	movs	r0, #120	; 0x78
 800078a:	f000 fa1f 	bl	8000bcc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800078e:	2222      	movs	r2, #34	; 0x22
 8000790:	2100      	movs	r1, #0
 8000792:	2078      	movs	r0, #120	; 0x78
 8000794:	f000 fa1a 	bl	8000bcc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000798:	22da      	movs	r2, #218	; 0xda
 800079a:	2100      	movs	r1, #0
 800079c:	2078      	movs	r0, #120	; 0x78
 800079e:	f000 fa15 	bl	8000bcc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80007a2:	2212      	movs	r2, #18
 80007a4:	2100      	movs	r1, #0
 80007a6:	2078      	movs	r0, #120	; 0x78
 80007a8:	f000 fa10 	bl	8000bcc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80007ac:	22db      	movs	r2, #219	; 0xdb
 80007ae:	2100      	movs	r1, #0
 80007b0:	2078      	movs	r0, #120	; 0x78
 80007b2:	f000 fa0b 	bl	8000bcc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80007b6:	2220      	movs	r2, #32
 80007b8:	2100      	movs	r1, #0
 80007ba:	2078      	movs	r0, #120	; 0x78
 80007bc:	f000 fa06 	bl	8000bcc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80007c0:	228d      	movs	r2, #141	; 0x8d
 80007c2:	2100      	movs	r1, #0
 80007c4:	2078      	movs	r0, #120	; 0x78
 80007c6:	f000 fa01 	bl	8000bcc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80007ca:	2214      	movs	r2, #20
 80007cc:	2100      	movs	r1, #0
 80007ce:	2078      	movs	r0, #120	; 0x78
 80007d0:	f000 f9fc 	bl	8000bcc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80007d4:	22af      	movs	r2, #175	; 0xaf
 80007d6:	2100      	movs	r1, #0
 80007d8:	2078      	movs	r0, #120	; 0x78
 80007da:	f000 f9f7 	bl	8000bcc <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80007de:	222e      	movs	r2, #46	; 0x2e
 80007e0:	2100      	movs	r1, #0
 80007e2:	2078      	movs	r0, #120	; 0x78
 80007e4:	f000 f9f2 	bl	8000bcc <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80007e8:	2000      	movs	r0, #0
 80007ea:	f000 f843 	bl	8000874 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80007ee:	f000 f813 	bl	8000818 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <SSD1306_Init+0x184>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <SSD1306_Init+0x184>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80007fe:	4b05      	ldr	r3, [pc, #20]	; (8000814 <SSD1306_Init+0x184>)
 8000800:	2201      	movs	r2, #1
 8000802:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000804:	2301      	movs	r3, #1
}
 8000806:	4618      	mov	r0, r3
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	200000a8 	.word	0x200000a8
 8000814:	20000508 	.word	0x20000508

08000818 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800081e:	2300      	movs	r3, #0
 8000820:	71fb      	strb	r3, [r7, #7]
 8000822:	e01d      	b.n	8000860 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	3b50      	subs	r3, #80	; 0x50
 8000828:	b2db      	uxtb	r3, r3
 800082a:	461a      	mov	r2, r3
 800082c:	2100      	movs	r1, #0
 800082e:	2078      	movs	r0, #120	; 0x78
 8000830:	f000 f9cc 	bl	8000bcc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000834:	2200      	movs	r2, #0
 8000836:	2100      	movs	r1, #0
 8000838:	2078      	movs	r0, #120	; 0x78
 800083a:	f000 f9c7 	bl	8000bcc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800083e:	2210      	movs	r2, #16
 8000840:	2100      	movs	r1, #0
 8000842:	2078      	movs	r0, #120	; 0x78
 8000844:	f000 f9c2 	bl	8000bcc <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	01db      	lsls	r3, r3, #7
 800084c:	4a08      	ldr	r2, [pc, #32]	; (8000870 <SSD1306_UpdateScreen+0x58>)
 800084e:	441a      	add	r2, r3
 8000850:	2380      	movs	r3, #128	; 0x80
 8000852:	2140      	movs	r1, #64	; 0x40
 8000854:	2078      	movs	r0, #120	; 0x78
 8000856:	f000 f953 	bl	8000b00 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	3301      	adds	r3, #1
 800085e:	71fb      	strb	r3, [r7, #7]
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	2b07      	cmp	r3, #7
 8000864:	d9de      	bls.n	8000824 <SSD1306_UpdateScreen+0xc>
	}
}
 8000866:	bf00      	nop
 8000868:	bf00      	nop
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000108 	.word	0x20000108

08000874 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d101      	bne.n	8000888 <SSD1306_Fill+0x14>
 8000884:	2300      	movs	r3, #0
 8000886:	e000      	b.n	800088a <SSD1306_Fill+0x16>
 8000888:	23ff      	movs	r3, #255	; 0xff
 800088a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800088e:	4619      	mov	r1, r3
 8000890:	4803      	ldr	r0, [pc, #12]	; (80008a0 <SSD1306_Fill+0x2c>)
 8000892:	f001 ff25 	bl	80026e0 <memset>
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000108 	.word	0x20000108

080008a4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	80fb      	strh	r3, [r7, #6]
 80008ae:	460b      	mov	r3, r1
 80008b0:	80bb      	strh	r3, [r7, #4]
 80008b2:	4613      	mov	r3, r2
 80008b4:	70fb      	strb	r3, [r7, #3]
	if (
 80008b6:	88fb      	ldrh	r3, [r7, #6]
 80008b8:	2b7f      	cmp	r3, #127	; 0x7f
 80008ba:	d848      	bhi.n	800094e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80008bc:	88bb      	ldrh	r3, [r7, #4]
 80008be:	2b3f      	cmp	r3, #63	; 0x3f
 80008c0:	d845      	bhi.n	800094e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80008c2:	4b25      	ldr	r3, [pc, #148]	; (8000958 <SSD1306_DrawPixel+0xb4>)
 80008c4:	791b      	ldrb	r3, [r3, #4]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d006      	beq.n	80008d8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80008ca:	78fb      	ldrb	r3, [r7, #3]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	bf0c      	ite	eq
 80008d0:	2301      	moveq	r3, #1
 80008d2:	2300      	movne	r3, #0
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80008d8:	78fb      	ldrb	r3, [r7, #3]
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d11a      	bne.n	8000914 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80008de:	88fa      	ldrh	r2, [r7, #6]
 80008e0:	88bb      	ldrh	r3, [r7, #4]
 80008e2:	08db      	lsrs	r3, r3, #3
 80008e4:	b298      	uxth	r0, r3
 80008e6:	4603      	mov	r3, r0
 80008e8:	01db      	lsls	r3, r3, #7
 80008ea:	4413      	add	r3, r2
 80008ec:	4a1b      	ldr	r2, [pc, #108]	; (800095c <SSD1306_DrawPixel+0xb8>)
 80008ee:	5cd3      	ldrb	r3, [r2, r3]
 80008f0:	b25a      	sxtb	r2, r3
 80008f2:	88bb      	ldrh	r3, [r7, #4]
 80008f4:	f003 0307 	and.w	r3, r3, #7
 80008f8:	2101      	movs	r1, #1
 80008fa:	fa01 f303 	lsl.w	r3, r1, r3
 80008fe:	b25b      	sxtb	r3, r3
 8000900:	4313      	orrs	r3, r2
 8000902:	b259      	sxtb	r1, r3
 8000904:	88fa      	ldrh	r2, [r7, #6]
 8000906:	4603      	mov	r3, r0
 8000908:	01db      	lsls	r3, r3, #7
 800090a:	4413      	add	r3, r2
 800090c:	b2c9      	uxtb	r1, r1
 800090e:	4a13      	ldr	r2, [pc, #76]	; (800095c <SSD1306_DrawPixel+0xb8>)
 8000910:	54d1      	strb	r1, [r2, r3]
 8000912:	e01d      	b.n	8000950 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000914:	88fa      	ldrh	r2, [r7, #6]
 8000916:	88bb      	ldrh	r3, [r7, #4]
 8000918:	08db      	lsrs	r3, r3, #3
 800091a:	b298      	uxth	r0, r3
 800091c:	4603      	mov	r3, r0
 800091e:	01db      	lsls	r3, r3, #7
 8000920:	4413      	add	r3, r2
 8000922:	4a0e      	ldr	r2, [pc, #56]	; (800095c <SSD1306_DrawPixel+0xb8>)
 8000924:	5cd3      	ldrb	r3, [r2, r3]
 8000926:	b25a      	sxtb	r2, r3
 8000928:	88bb      	ldrh	r3, [r7, #4]
 800092a:	f003 0307 	and.w	r3, r3, #7
 800092e:	2101      	movs	r1, #1
 8000930:	fa01 f303 	lsl.w	r3, r1, r3
 8000934:	b25b      	sxtb	r3, r3
 8000936:	43db      	mvns	r3, r3
 8000938:	b25b      	sxtb	r3, r3
 800093a:	4013      	ands	r3, r2
 800093c:	b259      	sxtb	r1, r3
 800093e:	88fa      	ldrh	r2, [r7, #6]
 8000940:	4603      	mov	r3, r0
 8000942:	01db      	lsls	r3, r3, #7
 8000944:	4413      	add	r3, r2
 8000946:	b2c9      	uxtb	r1, r1
 8000948:	4a04      	ldr	r2, [pc, #16]	; (800095c <SSD1306_DrawPixel+0xb8>)
 800094a:	54d1      	strb	r1, [r2, r3]
 800094c:	e000      	b.n	8000950 <SSD1306_DrawPixel+0xac>
		return;
 800094e:	bf00      	nop
	}
}
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr
 8000958:	20000508 	.word	0x20000508
 800095c:	20000108 	.word	0x20000108

08000960 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	460a      	mov	r2, r1
 800096a:	80fb      	strh	r3, [r7, #6]
 800096c:	4613      	mov	r3, r2
 800096e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000970:	4a05      	ldr	r2, [pc, #20]	; (8000988 <SSD1306_GotoXY+0x28>)
 8000972:	88fb      	ldrh	r3, [r7, #6]
 8000974:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000976:	4a04      	ldr	r2, [pc, #16]	; (8000988 <SSD1306_GotoXY+0x28>)
 8000978:	88bb      	ldrh	r3, [r7, #4]
 800097a:	8053      	strh	r3, [r2, #2]
}
 800097c:	bf00      	nop
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	bc80      	pop	{r7}
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	20000508 	.word	0x20000508

0800098c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	6039      	str	r1, [r7, #0]
 8000996:	71fb      	strb	r3, [r7, #7]
 8000998:	4613      	mov	r3, r2
 800099a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800099c:	4b3a      	ldr	r3, [pc, #232]	; (8000a88 <SSD1306_Putc+0xfc>)
 800099e:	881b      	ldrh	r3, [r3, #0]
 80009a0:	461a      	mov	r2, r3
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	4413      	add	r3, r2
	if (
 80009a8:	2b7f      	cmp	r3, #127	; 0x7f
 80009aa:	dc07      	bgt.n	80009bc <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80009ac:	4b36      	ldr	r3, [pc, #216]	; (8000a88 <SSD1306_Putc+0xfc>)
 80009ae:	885b      	ldrh	r3, [r3, #2]
 80009b0:	461a      	mov	r2, r3
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	785b      	ldrb	r3, [r3, #1]
 80009b6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80009b8:	2b3f      	cmp	r3, #63	; 0x3f
 80009ba:	dd01      	ble.n	80009c0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	e05e      	b.n	8000a7e <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	e04b      	b.n	8000a5e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	685a      	ldr	r2, [r3, #4]
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	3b20      	subs	r3, #32
 80009ce:	6839      	ldr	r1, [r7, #0]
 80009d0:	7849      	ldrb	r1, [r1, #1]
 80009d2:	fb01 f303 	mul.w	r3, r1, r3
 80009d6:	4619      	mov	r1, r3
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	440b      	add	r3, r1
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	4413      	add	r3, r2
 80009e0:	881b      	ldrh	r3, [r3, #0]
 80009e2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80009e4:	2300      	movs	r3, #0
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	e030      	b.n	8000a4c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80009ea:	68fa      	ldr	r2, [r7, #12]
 80009ec:	693b      	ldr	r3, [r7, #16]
 80009ee:	fa02 f303 	lsl.w	r3, r2, r3
 80009f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d010      	beq.n	8000a1c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80009fa:	4b23      	ldr	r3, [pc, #140]	; (8000a88 <SSD1306_Putc+0xfc>)
 80009fc:	881a      	ldrh	r2, [r3, #0]
 80009fe:	693b      	ldr	r3, [r7, #16]
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	4413      	add	r3, r2
 8000a04:	b298      	uxth	r0, r3
 8000a06:	4b20      	ldr	r3, [pc, #128]	; (8000a88 <SSD1306_Putc+0xfc>)
 8000a08:	885a      	ldrh	r2, [r3, #2]
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	b29b      	uxth	r3, r3
 8000a0e:	4413      	add	r3, r2
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	79ba      	ldrb	r2, [r7, #6]
 8000a14:	4619      	mov	r1, r3
 8000a16:	f7ff ff45 	bl	80008a4 <SSD1306_DrawPixel>
 8000a1a:	e014      	b.n	8000a46 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000a1c:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <SSD1306_Putc+0xfc>)
 8000a1e:	881a      	ldrh	r2, [r3, #0]
 8000a20:	693b      	ldr	r3, [r7, #16]
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	4413      	add	r3, r2
 8000a26:	b298      	uxth	r0, r3
 8000a28:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <SSD1306_Putc+0xfc>)
 8000a2a:	885a      	ldrh	r2, [r3, #2]
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	4413      	add	r3, r2
 8000a32:	b299      	uxth	r1, r3
 8000a34:	79bb      	ldrb	r3, [r7, #6]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	bf0c      	ite	eq
 8000a3a:	2301      	moveq	r3, #1
 8000a3c:	2300      	movne	r3, #0
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	461a      	mov	r2, r3
 8000a42:	f7ff ff2f 	bl	80008a4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	461a      	mov	r2, r3
 8000a52:	693b      	ldr	r3, [r7, #16]
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d3c8      	bcc.n	80009ea <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	617b      	str	r3, [r7, #20]
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	785b      	ldrb	r3, [r3, #1]
 8000a62:	461a      	mov	r2, r3
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d3ad      	bcc.n	80009c6 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000a6a:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <SSD1306_Putc+0xfc>)
 8000a6c:	881a      	ldrh	r2, [r3, #0]
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	4413      	add	r3, r2
 8000a76:	b29a      	uxth	r2, r3
 8000a78:	4b03      	ldr	r3, [pc, #12]	; (8000a88 <SSD1306_Putc+0xfc>)
 8000a7a:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3718      	adds	r7, #24
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000508 	.word	0x20000508

08000a8c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	4613      	mov	r3, r2
 8000a98:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000a9a:	e012      	b.n	8000ac2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	79fa      	ldrb	r2, [r7, #7]
 8000aa2:	68b9      	ldr	r1, [r7, #8]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff ff71 	bl	800098c <SSD1306_Putc>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	461a      	mov	r2, r3
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	d002      	beq.n	8000abc <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	e008      	b.n	8000ace <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d1e8      	bne.n	8000a9c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	781b      	ldrb	r3, [r3, #0]
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000ade:	4b07      	ldr	r3, [pc, #28]	; (8000afc <ssd1306_I2C_Init+0x24>)
 8000ae0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000ae2:	e002      	b.n	8000aea <ssd1306_I2C_Init+0x12>
		p--;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	3b01      	subs	r3, #1
 8000ae8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d1f9      	bne.n	8000ae4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000af0:	bf00      	nop
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr
 8000afc:	0003d090 	.word	0x0003d090

08000b00 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000b00:	b590      	push	{r4, r7, lr}
 8000b02:	b0c7      	sub	sp, #284	; 0x11c
 8000b04:	af02      	add	r7, sp, #8
 8000b06:	4604      	mov	r4, r0
 8000b08:	4608      	mov	r0, r1
 8000b0a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000b0e:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000b12:	600a      	str	r2, [r1, #0]
 8000b14:	4619      	mov	r1, r3
 8000b16:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b1a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000b1e:	4622      	mov	r2, r4
 8000b20:	701a      	strb	r2, [r3, #0]
 8000b22:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b26:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000b2a:	4602      	mov	r2, r0
 8000b2c:	701a      	strb	r2, [r3, #0]
 8000b2e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b32:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000b36:	460a      	mov	r2, r1
 8000b38:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000b3a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000b42:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000b46:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000b4a:	7812      	ldrb	r2, [r2, #0]
 8000b4c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000b4e:	2300      	movs	r3, #0
 8000b50:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000b54:	e015      	b.n	8000b82 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000b56:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000b5a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000b5e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000b62:	6812      	ldr	r2, [r2, #0]
 8000b64:	441a      	add	r2, r3
 8000b66:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	7811      	ldrb	r1, [r2, #0]
 8000b6e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000b72:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000b76:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000b78:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000b82:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000b8c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000b90:	8812      	ldrh	r2, [r2, #0]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	d8df      	bhi.n	8000b56 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000b96:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b9a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	b299      	uxth	r1, r3
 8000ba2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ba6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000baa:	881b      	ldrh	r3, [r3, #0]
 8000bac:	3301      	adds	r3, #1
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	f107 020c 	add.w	r2, r7, #12
 8000bb4:	200a      	movs	r0, #10
 8000bb6:	9000      	str	r0, [sp, #0]
 8000bb8:	4803      	ldr	r0, [pc, #12]	; (8000bc8 <ssd1306_I2C_WriteMulti+0xc8>)
 8000bba:	f000 fd2d 	bl	8001618 <HAL_I2C_Master_Transmit>
}
 8000bbe:	bf00      	nop
 8000bc0:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd90      	pop	{r4, r7, pc}
 8000bc8:	200000a8 	.word	0x200000a8

08000bcc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af02      	add	r7, sp, #8
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
 8000bd6:	460b      	mov	r3, r1
 8000bd8:	71bb      	strb	r3, [r7, #6]
 8000bda:	4613      	mov	r3, r2
 8000bdc:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000bde:	79bb      	ldrb	r3, [r7, #6]
 8000be0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000be2:	797b      	ldrb	r3, [r7, #5]
 8000be4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	b299      	uxth	r1, r3
 8000bea:	f107 020c 	add.w	r2, r7, #12
 8000bee:	230a      	movs	r3, #10
 8000bf0:	9300      	str	r3, [sp, #0]
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	4803      	ldr	r0, [pc, #12]	; (8000c04 <ssd1306_I2C_Write+0x38>)
 8000bf6:	f000 fd0f 	bl	8001618 <HAL_I2C_Master_Transmit>
}
 8000bfa:	bf00      	nop
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	200000a8 	.word	0x200000a8

08000c08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c0e:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <HAL_MspInit+0x5c>)
 8000c10:	699b      	ldr	r3, [r3, #24]
 8000c12:	4a14      	ldr	r2, [pc, #80]	; (8000c64 <HAL_MspInit+0x5c>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	6193      	str	r3, [r2, #24]
 8000c1a:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <HAL_MspInit+0x5c>)
 8000c1c:	699b      	ldr	r3, [r3, #24]
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c26:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <HAL_MspInit+0x5c>)
 8000c28:	69db      	ldr	r3, [r3, #28]
 8000c2a:	4a0e      	ldr	r2, [pc, #56]	; (8000c64 <HAL_MspInit+0x5c>)
 8000c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c30:	61d3      	str	r3, [r2, #28]
 8000c32:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <HAL_MspInit+0x5c>)
 8000c34:	69db      	ldr	r3, [r3, #28]
 8000c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <HAL_MspInit+0x60>)
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	4a04      	ldr	r2, [pc, #16]	; (8000c68 <HAL_MspInit+0x60>)
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	3714      	adds	r7, #20
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr
 8000c64:	40021000 	.word	0x40021000
 8000c68:	40010000 	.word	0x40010000

08000c6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b088      	sub	sp, #32
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 0310 	add.w	r3, r7, #16
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a15      	ldr	r2, [pc, #84]	; (8000cdc <HAL_I2C_MspInit+0x70>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d123      	bne.n	8000cd4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8c:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <HAL_I2C_MspInit+0x74>)
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	4a13      	ldr	r2, [pc, #76]	; (8000ce0 <HAL_I2C_MspInit+0x74>)
 8000c92:	f043 0308 	orr.w	r3, r3, #8
 8000c96:	6193      	str	r3, [r2, #24]
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_I2C_MspInit+0x74>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	f003 0308 	and.w	r3, r3, #8
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ca4:	23c0      	movs	r3, #192	; 0xc0
 8000ca6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ca8:	2312      	movs	r3, #18
 8000caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cac:	2303      	movs	r3, #3
 8000cae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb0:	f107 0310 	add.w	r3, r7, #16
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	480b      	ldr	r0, [pc, #44]	; (8000ce4 <HAL_I2C_MspInit+0x78>)
 8000cb8:	f000 f9e6 	bl	8001088 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cbc:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <HAL_I2C_MspInit+0x74>)
 8000cbe:	69db      	ldr	r3, [r3, #28]
 8000cc0:	4a07      	ldr	r2, [pc, #28]	; (8000ce0 <HAL_I2C_MspInit+0x74>)
 8000cc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cc6:	61d3      	str	r3, [r2, #28]
 8000cc8:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <HAL_I2C_MspInit+0x74>)
 8000cca:	69db      	ldr	r3, [r3, #28]
 8000ccc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cd4:	bf00      	nop
 8000cd6:	3720      	adds	r7, #32
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40005400 	.word	0x40005400
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	40010c00 	.word	0x40010c00

08000ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <NMI_Handler+0x4>

08000cee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <HardFault_Handler+0x4>

08000cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <MemManage_Handler+0x4>

08000cfa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <BusFault_Handler+0x4>

08000d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <UsageFault_Handler+0x4>

08000d06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr

08000d12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr

08000d1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc80      	pop	{r7}
 8000d28:	4770      	bx	lr

08000d2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d2e:	f000 f8ab 	bl	8000e88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d40:	4a14      	ldr	r2, [pc, #80]	; (8000d94 <_sbrk+0x5c>)
 8000d42:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <_sbrk+0x60>)
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d4c:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <_sbrk+0x64>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d102      	bne.n	8000d5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d54:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <_sbrk+0x64>)
 8000d56:	4a12      	ldr	r2, [pc, #72]	; (8000da0 <_sbrk+0x68>)
 8000d58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d5a:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <_sbrk+0x64>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4413      	add	r3, r2
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d207      	bcs.n	8000d78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d68:	f001 fc90 	bl	800268c <__errno>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	220c      	movs	r2, #12
 8000d70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d72:	f04f 33ff 	mov.w	r3, #4294967295
 8000d76:	e009      	b.n	8000d8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d78:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <_sbrk+0x64>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d7e:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <_sbrk+0x64>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	4a05      	ldr	r2, [pc, #20]	; (8000d9c <_sbrk+0x64>)
 8000d88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3718      	adds	r7, #24
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20005000 	.word	0x20005000
 8000d98:	00000400 	.word	0x00000400
 8000d9c:	20000510 	.word	0x20000510
 8000da0:	20000528 	.word	0x20000528

08000da4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr

08000db0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000db0:	480c      	ldr	r0, [pc, #48]	; (8000de4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000db2:	490d      	ldr	r1, [pc, #52]	; (8000de8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000db4:	4a0d      	ldr	r2, [pc, #52]	; (8000dec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db8:	e002      	b.n	8000dc0 <LoopCopyDataInit>

08000dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dbe:	3304      	adds	r3, #4

08000dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc4:	d3f9      	bcc.n	8000dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dc8:	4c0a      	ldr	r4, [pc, #40]	; (8000df4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dcc:	e001      	b.n	8000dd2 <LoopFillZerobss>

08000dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd0:	3204      	adds	r2, #4

08000dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd4:	d3fb      	bcc.n	8000dce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000dd6:	f7ff ffe5 	bl	8000da4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dda:	f001 fc5d 	bl	8002698 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dde:	f7ff fb5d 	bl	800049c <main>
  bx lr
 8000de2:	4770      	bx	lr
  ldr r0, =_sdata
 8000de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de8:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000dec:	080043b4 	.word	0x080043b4
  ldr r2, =_sbss
 8000df0:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000df4:	20000528 	.word	0x20000528

08000df8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000df8:	e7fe      	b.n	8000df8 <ADC1_2_IRQHandler>
	...

08000dfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e00:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <HAL_Init+0x28>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a07      	ldr	r2, [pc, #28]	; (8000e24 <HAL_Init+0x28>)
 8000e06:	f043 0310 	orr.w	r3, r3, #16
 8000e0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e0c:	2003      	movs	r0, #3
 8000e0e:	f000 f907 	bl	8001020 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e12:	200f      	movs	r0, #15
 8000e14:	f000 f808 	bl	8000e28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e18:	f7ff fef6 	bl	8000c08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40022000 	.word	0x40022000

08000e28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <HAL_InitTick+0x54>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <HAL_InitTick+0x58>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e46:	4618      	mov	r0, r3
 8000e48:	f000 f911 	bl	800106e <HAL_SYSTICK_Config>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e00e      	b.n	8000e74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2b0f      	cmp	r3, #15
 8000e5a:	d80a      	bhi.n	8000e72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	6879      	ldr	r1, [r7, #4]
 8000e60:	f04f 30ff 	mov.w	r0, #4294967295
 8000e64:	f000 f8e7 	bl	8001036 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e68:	4a06      	ldr	r2, [pc, #24]	; (8000e84 <HAL_InitTick+0x5c>)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	e000      	b.n	8000e74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000014 	.word	0x20000014
 8000e80:	2000001c 	.word	0x2000001c
 8000e84:	20000018 	.word	0x20000018

08000e88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e8c:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <HAL_IncTick+0x1c>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	461a      	mov	r2, r3
 8000e92:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <HAL_IncTick+0x20>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4413      	add	r3, r2
 8000e98:	4a03      	ldr	r2, [pc, #12]	; (8000ea8 <HAL_IncTick+0x20>)
 8000e9a:	6013      	str	r3, [r2, #0]
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr
 8000ea4:	2000001c 	.word	0x2000001c
 8000ea8:	20000514 	.word	0x20000514

08000eac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb0:	4b02      	ldr	r3, [pc, #8]	; (8000ebc <HAL_GetTick+0x10>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr
 8000ebc:	20000514 	.word	0x20000514

08000ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed6:	68ba      	ldr	r2, [r7, #8]
 8000ed8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000edc:	4013      	ands	r3, r2
 8000ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef2:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	60d3      	str	r3, [r2, #12]
}
 8000ef8:	bf00      	nop
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f0c:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <__NVIC_GetPriorityGrouping+0x18>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	0a1b      	lsrs	r3, r3, #8
 8000f12:	f003 0307 	and.w	r3, r3, #7
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bc80      	pop	{r7}
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	6039      	str	r1, [r7, #0]
 8000f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	db0a      	blt.n	8000f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	490c      	ldr	r1, [pc, #48]	; (8000f70 <__NVIC_SetPriority+0x4c>)
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	0112      	lsls	r2, r2, #4
 8000f44:	b2d2      	uxtb	r2, r2
 8000f46:	440b      	add	r3, r1
 8000f48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f4c:	e00a      	b.n	8000f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4908      	ldr	r1, [pc, #32]	; (8000f74 <__NVIC_SetPriority+0x50>)
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	f003 030f 	and.w	r3, r3, #15
 8000f5a:	3b04      	subs	r3, #4
 8000f5c:	0112      	lsls	r2, r2, #4
 8000f5e:	b2d2      	uxtb	r2, r2
 8000f60:	440b      	add	r3, r1
 8000f62:	761a      	strb	r2, [r3, #24]
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bc80      	pop	{r7}
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	e000e100 	.word	0xe000e100
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b089      	sub	sp, #36	; 0x24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	f1c3 0307 	rsb	r3, r3, #7
 8000f92:	2b04      	cmp	r3, #4
 8000f94:	bf28      	it	cs
 8000f96:	2304      	movcs	r3, #4
 8000f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	3304      	adds	r3, #4
 8000f9e:	2b06      	cmp	r3, #6
 8000fa0:	d902      	bls.n	8000fa8 <NVIC_EncodePriority+0x30>
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3b03      	subs	r3, #3
 8000fa6:	e000      	b.n	8000faa <NVIC_EncodePriority+0x32>
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fac:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43da      	mvns	r2, r3
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	401a      	ands	r2, r3
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fca:	43d9      	mvns	r1, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd0:	4313      	orrs	r3, r2
         );
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3724      	adds	r7, #36	; 0x24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr

08000fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fec:	d301      	bcc.n	8000ff2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e00f      	b.n	8001012 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ff2:	4a0a      	ldr	r2, [pc, #40]	; (800101c <SysTick_Config+0x40>)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ffa:	210f      	movs	r1, #15
 8000ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8001000:	f7ff ff90 	bl	8000f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001004:	4b05      	ldr	r3, [pc, #20]	; (800101c <SysTick_Config+0x40>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800100a:	4b04      	ldr	r3, [pc, #16]	; (800101c <SysTick_Config+0x40>)
 800100c:	2207      	movs	r2, #7
 800100e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	e000e010 	.word	0xe000e010

08001020 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff ff49 	bl	8000ec0 <__NVIC_SetPriorityGrouping>
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001036:	b580      	push	{r7, lr}
 8001038:	b086      	sub	sp, #24
 800103a:	af00      	add	r7, sp, #0
 800103c:	4603      	mov	r3, r0
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]
 8001042:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001048:	f7ff ff5e 	bl	8000f08 <__NVIC_GetPriorityGrouping>
 800104c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	68b9      	ldr	r1, [r7, #8]
 8001052:	6978      	ldr	r0, [r7, #20]
 8001054:	f7ff ff90 	bl	8000f78 <NVIC_EncodePriority>
 8001058:	4602      	mov	r2, r0
 800105a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800105e:	4611      	mov	r1, r2
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff5f 	bl	8000f24 <__NVIC_SetPriority>
}
 8001066:	bf00      	nop
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff ffb0 	bl	8000fdc <SysTick_Config>
 800107c:	4603      	mov	r3, r0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001088:	b480      	push	{r7}
 800108a:	b08b      	sub	sp, #44	; 0x2c
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001092:	2300      	movs	r3, #0
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001096:	2300      	movs	r3, #0
 8001098:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800109a:	e169      	b.n	8001370 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800109c:	2201      	movs	r2, #1
 800109e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	69fa      	ldr	r2, [r7, #28]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	f040 8158 	bne.w	800136a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	4a9a      	ldr	r2, [pc, #616]	; (8001328 <HAL_GPIO_Init+0x2a0>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d05e      	beq.n	8001182 <HAL_GPIO_Init+0xfa>
 80010c4:	4a98      	ldr	r2, [pc, #608]	; (8001328 <HAL_GPIO_Init+0x2a0>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d875      	bhi.n	80011b6 <HAL_GPIO_Init+0x12e>
 80010ca:	4a98      	ldr	r2, [pc, #608]	; (800132c <HAL_GPIO_Init+0x2a4>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d058      	beq.n	8001182 <HAL_GPIO_Init+0xfa>
 80010d0:	4a96      	ldr	r2, [pc, #600]	; (800132c <HAL_GPIO_Init+0x2a4>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d86f      	bhi.n	80011b6 <HAL_GPIO_Init+0x12e>
 80010d6:	4a96      	ldr	r2, [pc, #600]	; (8001330 <HAL_GPIO_Init+0x2a8>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d052      	beq.n	8001182 <HAL_GPIO_Init+0xfa>
 80010dc:	4a94      	ldr	r2, [pc, #592]	; (8001330 <HAL_GPIO_Init+0x2a8>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d869      	bhi.n	80011b6 <HAL_GPIO_Init+0x12e>
 80010e2:	4a94      	ldr	r2, [pc, #592]	; (8001334 <HAL_GPIO_Init+0x2ac>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d04c      	beq.n	8001182 <HAL_GPIO_Init+0xfa>
 80010e8:	4a92      	ldr	r2, [pc, #584]	; (8001334 <HAL_GPIO_Init+0x2ac>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d863      	bhi.n	80011b6 <HAL_GPIO_Init+0x12e>
 80010ee:	4a92      	ldr	r2, [pc, #584]	; (8001338 <HAL_GPIO_Init+0x2b0>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d046      	beq.n	8001182 <HAL_GPIO_Init+0xfa>
 80010f4:	4a90      	ldr	r2, [pc, #576]	; (8001338 <HAL_GPIO_Init+0x2b0>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d85d      	bhi.n	80011b6 <HAL_GPIO_Init+0x12e>
 80010fa:	2b12      	cmp	r3, #18
 80010fc:	d82a      	bhi.n	8001154 <HAL_GPIO_Init+0xcc>
 80010fe:	2b12      	cmp	r3, #18
 8001100:	d859      	bhi.n	80011b6 <HAL_GPIO_Init+0x12e>
 8001102:	a201      	add	r2, pc, #4	; (adr r2, 8001108 <HAL_GPIO_Init+0x80>)
 8001104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001108:	08001183 	.word	0x08001183
 800110c:	0800115d 	.word	0x0800115d
 8001110:	0800116f 	.word	0x0800116f
 8001114:	080011b1 	.word	0x080011b1
 8001118:	080011b7 	.word	0x080011b7
 800111c:	080011b7 	.word	0x080011b7
 8001120:	080011b7 	.word	0x080011b7
 8001124:	080011b7 	.word	0x080011b7
 8001128:	080011b7 	.word	0x080011b7
 800112c:	080011b7 	.word	0x080011b7
 8001130:	080011b7 	.word	0x080011b7
 8001134:	080011b7 	.word	0x080011b7
 8001138:	080011b7 	.word	0x080011b7
 800113c:	080011b7 	.word	0x080011b7
 8001140:	080011b7 	.word	0x080011b7
 8001144:	080011b7 	.word	0x080011b7
 8001148:	080011b7 	.word	0x080011b7
 800114c:	08001165 	.word	0x08001165
 8001150:	08001179 	.word	0x08001179
 8001154:	4a79      	ldr	r2, [pc, #484]	; (800133c <HAL_GPIO_Init+0x2b4>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d013      	beq.n	8001182 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800115a:	e02c      	b.n	80011b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	623b      	str	r3, [r7, #32]
          break;
 8001162:	e029      	b.n	80011b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	3304      	adds	r3, #4
 800116a:	623b      	str	r3, [r7, #32]
          break;
 800116c:	e024      	b.n	80011b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	3308      	adds	r3, #8
 8001174:	623b      	str	r3, [r7, #32]
          break;
 8001176:	e01f      	b.n	80011b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	330c      	adds	r3, #12
 800117e:	623b      	str	r3, [r7, #32]
          break;
 8001180:	e01a      	b.n	80011b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d102      	bne.n	8001190 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800118a:	2304      	movs	r3, #4
 800118c:	623b      	str	r3, [r7, #32]
          break;
 800118e:	e013      	b.n	80011b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d105      	bne.n	80011a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001198:	2308      	movs	r3, #8
 800119a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	69fa      	ldr	r2, [r7, #28]
 80011a0:	611a      	str	r2, [r3, #16]
          break;
 80011a2:	e009      	b.n	80011b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011a4:	2308      	movs	r3, #8
 80011a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	69fa      	ldr	r2, [r7, #28]
 80011ac:	615a      	str	r2, [r3, #20]
          break;
 80011ae:	e003      	b.n	80011b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011b0:	2300      	movs	r3, #0
 80011b2:	623b      	str	r3, [r7, #32]
          break;
 80011b4:	e000      	b.n	80011b8 <HAL_GPIO_Init+0x130>
          break;
 80011b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	2bff      	cmp	r3, #255	; 0xff
 80011bc:	d801      	bhi.n	80011c2 <HAL_GPIO_Init+0x13a>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	e001      	b.n	80011c6 <HAL_GPIO_Init+0x13e>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	3304      	adds	r3, #4
 80011c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	2bff      	cmp	r3, #255	; 0xff
 80011cc:	d802      	bhi.n	80011d4 <HAL_GPIO_Init+0x14c>
 80011ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	e002      	b.n	80011da <HAL_GPIO_Init+0x152>
 80011d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d6:	3b08      	subs	r3, #8
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	210f      	movs	r1, #15
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	fa01 f303 	lsl.w	r3, r1, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	401a      	ands	r2, r3
 80011ec:	6a39      	ldr	r1, [r7, #32]
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	fa01 f303 	lsl.w	r3, r1, r3
 80011f4:	431a      	orrs	r2, r3
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001202:	2b00      	cmp	r3, #0
 8001204:	f000 80b1 	beq.w	800136a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001208:	4b4d      	ldr	r3, [pc, #308]	; (8001340 <HAL_GPIO_Init+0x2b8>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	4a4c      	ldr	r2, [pc, #304]	; (8001340 <HAL_GPIO_Init+0x2b8>)
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	6193      	str	r3, [r2, #24]
 8001214:	4b4a      	ldr	r3, [pc, #296]	; (8001340 <HAL_GPIO_Init+0x2b8>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001220:	4a48      	ldr	r2, [pc, #288]	; (8001344 <HAL_GPIO_Init+0x2bc>)
 8001222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001224:	089b      	lsrs	r3, r3, #2
 8001226:	3302      	adds	r3, #2
 8001228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800122c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800122e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001230:	f003 0303 	and.w	r3, r3, #3
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	220f      	movs	r2, #15
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	68fa      	ldr	r2, [r7, #12]
 8001240:	4013      	ands	r3, r2
 8001242:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a40      	ldr	r2, [pc, #256]	; (8001348 <HAL_GPIO_Init+0x2c0>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d013      	beq.n	8001274 <HAL_GPIO_Init+0x1ec>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a3f      	ldr	r2, [pc, #252]	; (800134c <HAL_GPIO_Init+0x2c4>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d00d      	beq.n	8001270 <HAL_GPIO_Init+0x1e8>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4a3e      	ldr	r2, [pc, #248]	; (8001350 <HAL_GPIO_Init+0x2c8>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d007      	beq.n	800126c <HAL_GPIO_Init+0x1e4>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4a3d      	ldr	r2, [pc, #244]	; (8001354 <HAL_GPIO_Init+0x2cc>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d101      	bne.n	8001268 <HAL_GPIO_Init+0x1e0>
 8001264:	2303      	movs	r3, #3
 8001266:	e006      	b.n	8001276 <HAL_GPIO_Init+0x1ee>
 8001268:	2304      	movs	r3, #4
 800126a:	e004      	b.n	8001276 <HAL_GPIO_Init+0x1ee>
 800126c:	2302      	movs	r3, #2
 800126e:	e002      	b.n	8001276 <HAL_GPIO_Init+0x1ee>
 8001270:	2301      	movs	r3, #1
 8001272:	e000      	b.n	8001276 <HAL_GPIO_Init+0x1ee>
 8001274:	2300      	movs	r3, #0
 8001276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001278:	f002 0203 	and.w	r2, r2, #3
 800127c:	0092      	lsls	r2, r2, #2
 800127e:	4093      	lsls	r3, r2
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	4313      	orrs	r3, r2
 8001284:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001286:	492f      	ldr	r1, [pc, #188]	; (8001344 <HAL_GPIO_Init+0x2bc>)
 8001288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128a:	089b      	lsrs	r3, r3, #2
 800128c:	3302      	adds	r3, #2
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d006      	beq.n	80012ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012a0:	4b2d      	ldr	r3, [pc, #180]	; (8001358 <HAL_GPIO_Init+0x2d0>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	492c      	ldr	r1, [pc, #176]	; (8001358 <HAL_GPIO_Init+0x2d0>)
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	600b      	str	r3, [r1, #0]
 80012ac:	e006      	b.n	80012bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012ae:	4b2a      	ldr	r3, [pc, #168]	; (8001358 <HAL_GPIO_Init+0x2d0>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	4928      	ldr	r1, [pc, #160]	; (8001358 <HAL_GPIO_Init+0x2d0>)
 80012b8:	4013      	ands	r3, r2
 80012ba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d006      	beq.n	80012d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012c8:	4b23      	ldr	r3, [pc, #140]	; (8001358 <HAL_GPIO_Init+0x2d0>)
 80012ca:	685a      	ldr	r2, [r3, #4]
 80012cc:	4922      	ldr	r1, [pc, #136]	; (8001358 <HAL_GPIO_Init+0x2d0>)
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	604b      	str	r3, [r1, #4]
 80012d4:	e006      	b.n	80012e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012d6:	4b20      	ldr	r3, [pc, #128]	; (8001358 <HAL_GPIO_Init+0x2d0>)
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	43db      	mvns	r3, r3
 80012de:	491e      	ldr	r1, [pc, #120]	; (8001358 <HAL_GPIO_Init+0x2d0>)
 80012e0:	4013      	ands	r3, r2
 80012e2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d006      	beq.n	80012fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012f0:	4b19      	ldr	r3, [pc, #100]	; (8001358 <HAL_GPIO_Init+0x2d0>)
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	4918      	ldr	r1, [pc, #96]	; (8001358 <HAL_GPIO_Init+0x2d0>)
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	608b      	str	r3, [r1, #8]
 80012fc:	e006      	b.n	800130c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012fe:	4b16      	ldr	r3, [pc, #88]	; (8001358 <HAL_GPIO_Init+0x2d0>)
 8001300:	689a      	ldr	r2, [r3, #8]
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	43db      	mvns	r3, r3
 8001306:	4914      	ldr	r1, [pc, #80]	; (8001358 <HAL_GPIO_Init+0x2d0>)
 8001308:	4013      	ands	r3, r2
 800130a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d021      	beq.n	800135c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001318:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <HAL_GPIO_Init+0x2d0>)
 800131a:	68da      	ldr	r2, [r3, #12]
 800131c:	490e      	ldr	r1, [pc, #56]	; (8001358 <HAL_GPIO_Init+0x2d0>)
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	4313      	orrs	r3, r2
 8001322:	60cb      	str	r3, [r1, #12]
 8001324:	e021      	b.n	800136a <HAL_GPIO_Init+0x2e2>
 8001326:	bf00      	nop
 8001328:	10320000 	.word	0x10320000
 800132c:	10310000 	.word	0x10310000
 8001330:	10220000 	.word	0x10220000
 8001334:	10210000 	.word	0x10210000
 8001338:	10120000 	.word	0x10120000
 800133c:	10110000 	.word	0x10110000
 8001340:	40021000 	.word	0x40021000
 8001344:	40010000 	.word	0x40010000
 8001348:	40010800 	.word	0x40010800
 800134c:	40010c00 	.word	0x40010c00
 8001350:	40011000 	.word	0x40011000
 8001354:	40011400 	.word	0x40011400
 8001358:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800135c:	4b0b      	ldr	r3, [pc, #44]	; (800138c <HAL_GPIO_Init+0x304>)
 800135e:	68da      	ldr	r2, [r3, #12]
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	43db      	mvns	r3, r3
 8001364:	4909      	ldr	r1, [pc, #36]	; (800138c <HAL_GPIO_Init+0x304>)
 8001366:	4013      	ands	r3, r2
 8001368:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136c:	3301      	adds	r3, #1
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001376:	fa22 f303 	lsr.w	r3, r2, r3
 800137a:	2b00      	cmp	r3, #0
 800137c:	f47f ae8e 	bne.w	800109c <HAL_GPIO_Init+0x14>
  }
}
 8001380:	bf00      	nop
 8001382:	bf00      	nop
 8001384:	372c      	adds	r7, #44	; 0x2c
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr
 800138c:	40010400 	.word	0x40010400

08001390 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d101      	bne.n	80013a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e12b      	b.n	80015fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d106      	bne.n	80013bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff fc58 	bl	8000c6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2224      	movs	r2, #36	; 0x24
 80013c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f022 0201 	bic.w	r2, r2, #1
 80013d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013f4:	f001 f918 	bl	8002628 <HAL_RCC_GetPCLK1Freq>
 80013f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	4a81      	ldr	r2, [pc, #516]	; (8001604 <HAL_I2C_Init+0x274>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d807      	bhi.n	8001414 <HAL_I2C_Init+0x84>
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	4a80      	ldr	r2, [pc, #512]	; (8001608 <HAL_I2C_Init+0x278>)
 8001408:	4293      	cmp	r3, r2
 800140a:	bf94      	ite	ls
 800140c:	2301      	movls	r3, #1
 800140e:	2300      	movhi	r3, #0
 8001410:	b2db      	uxtb	r3, r3
 8001412:	e006      	b.n	8001422 <HAL_I2C_Init+0x92>
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4a7d      	ldr	r2, [pc, #500]	; (800160c <HAL_I2C_Init+0x27c>)
 8001418:	4293      	cmp	r3, r2
 800141a:	bf94      	ite	ls
 800141c:	2301      	movls	r3, #1
 800141e:	2300      	movhi	r3, #0
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e0e7      	b.n	80015fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	4a78      	ldr	r2, [pc, #480]	; (8001610 <HAL_I2C_Init+0x280>)
 800142e:	fba2 2303 	umull	r2, r3, r2, r3
 8001432:	0c9b      	lsrs	r3, r3, #18
 8001434:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	68ba      	ldr	r2, [r7, #8]
 8001446:	430a      	orrs	r2, r1
 8001448:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	6a1b      	ldr	r3, [r3, #32]
 8001450:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	4a6a      	ldr	r2, [pc, #424]	; (8001604 <HAL_I2C_Init+0x274>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d802      	bhi.n	8001464 <HAL_I2C_Init+0xd4>
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	3301      	adds	r3, #1
 8001462:	e009      	b.n	8001478 <HAL_I2C_Init+0xe8>
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800146a:	fb02 f303 	mul.w	r3, r2, r3
 800146e:	4a69      	ldr	r2, [pc, #420]	; (8001614 <HAL_I2C_Init+0x284>)
 8001470:	fba2 2303 	umull	r2, r3, r2, r3
 8001474:	099b      	lsrs	r3, r3, #6
 8001476:	3301      	adds	r3, #1
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	6812      	ldr	r2, [r2, #0]
 800147c:	430b      	orrs	r3, r1
 800147e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800148a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	495c      	ldr	r1, [pc, #368]	; (8001604 <HAL_I2C_Init+0x274>)
 8001494:	428b      	cmp	r3, r1
 8001496:	d819      	bhi.n	80014cc <HAL_I2C_Init+0x13c>
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	1e59      	subs	r1, r3, #1
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80014a6:	1c59      	adds	r1, r3, #1
 80014a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80014ac:	400b      	ands	r3, r1
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d00a      	beq.n	80014c8 <HAL_I2C_Init+0x138>
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	1e59      	subs	r1, r3, #1
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80014c0:	3301      	adds	r3, #1
 80014c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014c6:	e051      	b.n	800156c <HAL_I2C_Init+0x1dc>
 80014c8:	2304      	movs	r3, #4
 80014ca:	e04f      	b.n	800156c <HAL_I2C_Init+0x1dc>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d111      	bne.n	80014f8 <HAL_I2C_Init+0x168>
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	1e58      	subs	r0, r3, #1
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6859      	ldr	r1, [r3, #4]
 80014dc:	460b      	mov	r3, r1
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	440b      	add	r3, r1
 80014e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80014e6:	3301      	adds	r3, #1
 80014e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	bf0c      	ite	eq
 80014f0:	2301      	moveq	r3, #1
 80014f2:	2300      	movne	r3, #0
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	e012      	b.n	800151e <HAL_I2C_Init+0x18e>
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	1e58      	subs	r0, r3, #1
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6859      	ldr	r1, [r3, #4]
 8001500:	460b      	mov	r3, r1
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	440b      	add	r3, r1
 8001506:	0099      	lsls	r1, r3, #2
 8001508:	440b      	add	r3, r1
 800150a:	fbb0 f3f3 	udiv	r3, r0, r3
 800150e:	3301      	adds	r3, #1
 8001510:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001514:	2b00      	cmp	r3, #0
 8001516:	bf0c      	ite	eq
 8001518:	2301      	moveq	r3, #1
 800151a:	2300      	movne	r3, #0
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <HAL_I2C_Init+0x196>
 8001522:	2301      	movs	r3, #1
 8001524:	e022      	b.n	800156c <HAL_I2C_Init+0x1dc>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10e      	bne.n	800154c <HAL_I2C_Init+0x1bc>
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	1e58      	subs	r0, r3, #1
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6859      	ldr	r1, [r3, #4]
 8001536:	460b      	mov	r3, r1
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	440b      	add	r3, r1
 800153c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001540:	3301      	adds	r3, #1
 8001542:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800154a:	e00f      	b.n	800156c <HAL_I2C_Init+0x1dc>
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	1e58      	subs	r0, r3, #1
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6859      	ldr	r1, [r3, #4]
 8001554:	460b      	mov	r3, r1
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	440b      	add	r3, r1
 800155a:	0099      	lsls	r1, r3, #2
 800155c:	440b      	add	r3, r1
 800155e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001562:	3301      	adds	r3, #1
 8001564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001568:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800156c:	6879      	ldr	r1, [r7, #4]
 800156e:	6809      	ldr	r1, [r1, #0]
 8001570:	4313      	orrs	r3, r2
 8001572:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	69da      	ldr	r2, [r3, #28]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a1b      	ldr	r3, [r3, #32]
 8001586:	431a      	orrs	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	430a      	orrs	r2, r1
 800158e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800159a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	6911      	ldr	r1, [r2, #16]
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	68d2      	ldr	r2, [r2, #12]
 80015a6:	4311      	orrs	r1, r2
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	6812      	ldr	r2, [r2, #0]
 80015ac:	430b      	orrs	r3, r1
 80015ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	695a      	ldr	r2, [r3, #20]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	431a      	orrs	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f042 0201 	orr.w	r2, r2, #1
 80015da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2220      	movs	r2, #32
 80015e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	000186a0 	.word	0x000186a0
 8001608:	001e847f 	.word	0x001e847f
 800160c:	003d08ff 	.word	0x003d08ff
 8001610:	431bde83 	.word	0x431bde83
 8001614:	10624dd3 	.word	0x10624dd3

08001618 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b088      	sub	sp, #32
 800161c:	af02      	add	r7, sp, #8
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	607a      	str	r2, [r7, #4]
 8001622:	461a      	mov	r2, r3
 8001624:	460b      	mov	r3, r1
 8001626:	817b      	strh	r3, [r7, #10]
 8001628:	4613      	mov	r3, r2
 800162a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800162c:	f7ff fc3e 	bl	8000eac <HAL_GetTick>
 8001630:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b20      	cmp	r3, #32
 800163c:	f040 80e0 	bne.w	8001800 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	2319      	movs	r3, #25
 8001646:	2201      	movs	r2, #1
 8001648:	4970      	ldr	r1, [pc, #448]	; (800180c <HAL_I2C_Master_Transmit+0x1f4>)
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	f000 fa92 	bl	8001b74 <I2C_WaitOnFlagUntilTimeout>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001656:	2302      	movs	r3, #2
 8001658:	e0d3      	b.n	8001802 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001660:	2b01      	cmp	r3, #1
 8001662:	d101      	bne.n	8001668 <HAL_I2C_Master_Transmit+0x50>
 8001664:	2302      	movs	r3, #2
 8001666:	e0cc      	b.n	8001802 <HAL_I2C_Master_Transmit+0x1ea>
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2201      	movs	r2, #1
 800166c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	2b01      	cmp	r3, #1
 800167c:	d007      	beq.n	800168e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f042 0201 	orr.w	r2, r2, #1
 800168c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800169c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2221      	movs	r2, #33	; 0x21
 80016a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2210      	movs	r2, #16
 80016aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2200      	movs	r2, #0
 80016b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	893a      	ldrh	r2, [r7, #8]
 80016be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	4a50      	ldr	r2, [pc, #320]	; (8001810 <HAL_I2C_Master_Transmit+0x1f8>)
 80016ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80016d0:	8979      	ldrh	r1, [r7, #10]
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	6a3a      	ldr	r2, [r7, #32]
 80016d6:	68f8      	ldr	r0, [r7, #12]
 80016d8:	f000 f9ca 	bl	8001a70 <I2C_MasterRequestWrite>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e08d      	b.n	8001802 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016e6:	2300      	movs	r3, #0
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	695b      	ldr	r3, [r3, #20]
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	613b      	str	r3, [r7, #16]
 80016fa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80016fc:	e066      	b.n	80017cc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016fe:	697a      	ldr	r2, [r7, #20]
 8001700:	6a39      	ldr	r1, [r7, #32]
 8001702:	68f8      	ldr	r0, [r7, #12]
 8001704:	f000 fb0c 	bl	8001d20 <I2C_WaitOnTXEFlagUntilTimeout>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d00d      	beq.n	800172a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	2b04      	cmp	r3, #4
 8001714:	d107      	bne.n	8001726 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001724:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e06b      	b.n	8001802 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172e:	781a      	ldrb	r2, [r3, #0]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173a:	1c5a      	adds	r2, r3, #1
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001744:	b29b      	uxth	r3, r3
 8001746:	3b01      	subs	r3, #1
 8001748:	b29a      	uxth	r2, r3
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001752:	3b01      	subs	r3, #1
 8001754:	b29a      	uxth	r2, r3
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	f003 0304 	and.w	r3, r3, #4
 8001764:	2b04      	cmp	r3, #4
 8001766:	d11b      	bne.n	80017a0 <HAL_I2C_Master_Transmit+0x188>
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800176c:	2b00      	cmp	r3, #0
 800176e:	d017      	beq.n	80017a0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001774:	781a      	ldrb	r2, [r3, #0]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001780:	1c5a      	adds	r2, r3, #1
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800178a:	b29b      	uxth	r3, r3
 800178c:	3b01      	subs	r3, #1
 800178e:	b29a      	uxth	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001798:	3b01      	subs	r3, #1
 800179a:	b29a      	uxth	r2, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017a0:	697a      	ldr	r2, [r7, #20]
 80017a2:	6a39      	ldr	r1, [r7, #32]
 80017a4:	68f8      	ldr	r0, [r7, #12]
 80017a6:	f000 fafc 	bl	8001da2 <I2C_WaitOnBTFFlagUntilTimeout>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d00d      	beq.n	80017cc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b4:	2b04      	cmp	r3, #4
 80017b6:	d107      	bne.n	80017c8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017c6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e01a      	b.n	8001802 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d194      	bne.n	80016fe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2220      	movs	r2, #32
 80017e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80017fc:	2300      	movs	r3, #0
 80017fe:	e000      	b.n	8001802 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001800:	2302      	movs	r3, #2
  }
}
 8001802:	4618      	mov	r0, r3
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	00100002 	.word	0x00100002
 8001810:	ffff0000 	.word	0xffff0000

08001814 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08a      	sub	sp, #40	; 0x28
 8001818:	af02      	add	r7, sp, #8
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	607a      	str	r2, [r7, #4]
 800181e:	603b      	str	r3, [r7, #0]
 8001820:	460b      	mov	r3, r1
 8001822:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001824:	f7ff fb42 	bl	8000eac <HAL_GetTick>
 8001828:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800182a:	2301      	movs	r3, #1
 800182c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b20      	cmp	r3, #32
 8001838:	f040 8111 	bne.w	8001a5e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	2319      	movs	r3, #25
 8001842:	2201      	movs	r2, #1
 8001844:	4988      	ldr	r1, [pc, #544]	; (8001a68 <HAL_I2C_IsDeviceReady+0x254>)
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	f000 f994 	bl	8001b74 <I2C_WaitOnFlagUntilTimeout>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001852:	2302      	movs	r3, #2
 8001854:	e104      	b.n	8001a60 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800185c:	2b01      	cmp	r3, #1
 800185e:	d101      	bne.n	8001864 <HAL_I2C_IsDeviceReady+0x50>
 8001860:	2302      	movs	r3, #2
 8001862:	e0fd      	b.n	8001a60 <HAL_I2C_IsDeviceReady+0x24c>
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2201      	movs	r2, #1
 8001868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	2b01      	cmp	r3, #1
 8001878:	d007      	beq.n	800188a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f042 0201 	orr.w	r2, r2, #1
 8001888:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001898:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2224      	movs	r2, #36	; 0x24
 800189e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2200      	movs	r2, #0
 80018a6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4a70      	ldr	r2, [pc, #448]	; (8001a6c <HAL_I2C_IsDeviceReady+0x258>)
 80018ac:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018bc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80018ca:	68f8      	ldr	r0, [r7, #12]
 80018cc:	f000 f952 	bl	8001b74 <I2C_WaitOnFlagUntilTimeout>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d00d      	beq.n	80018f2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018e4:	d103      	bne.n	80018ee <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018ec:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e0b6      	b.n	8001a60 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80018f2:	897b      	ldrh	r3, [r7, #10]
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	461a      	mov	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001900:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001902:	f7ff fad3 	bl	8000eac <HAL_GetTick>
 8001906:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b02      	cmp	r3, #2
 8001914:	bf0c      	ite	eq
 8001916:	2301      	moveq	r3, #1
 8001918:	2300      	movne	r3, #0
 800191a:	b2db      	uxtb	r3, r3
 800191c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	695b      	ldr	r3, [r3, #20]
 8001924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800192c:	bf0c      	ite	eq
 800192e:	2301      	moveq	r3, #1
 8001930:	2300      	movne	r3, #0
 8001932:	b2db      	uxtb	r3, r3
 8001934:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001936:	e025      	b.n	8001984 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001938:	f7ff fab8 	bl	8000eac <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	429a      	cmp	r2, r3
 8001946:	d302      	bcc.n	800194e <HAL_I2C_IsDeviceReady+0x13a>
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d103      	bne.n	8001956 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	22a0      	movs	r2, #160	; 0xa0
 8001952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	695b      	ldr	r3, [r3, #20]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b02      	cmp	r3, #2
 8001962:	bf0c      	ite	eq
 8001964:	2301      	moveq	r3, #1
 8001966:	2300      	movne	r3, #0
 8001968:	b2db      	uxtb	r3, r3
 800196a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800197a:	bf0c      	ite	eq
 800197c:	2301      	moveq	r3, #1
 800197e:	2300      	movne	r3, #0
 8001980:	b2db      	uxtb	r3, r3
 8001982:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800198a:	b2db      	uxtb	r3, r3
 800198c:	2ba0      	cmp	r3, #160	; 0xa0
 800198e:	d005      	beq.n	800199c <HAL_I2C_IsDeviceReady+0x188>
 8001990:	7dfb      	ldrb	r3, [r7, #23]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d102      	bne.n	800199c <HAL_I2C_IsDeviceReady+0x188>
 8001996:	7dbb      	ldrb	r3, [r7, #22]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d0cd      	beq.n	8001938 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2220      	movs	r2, #32
 80019a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d129      	bne.n	8001a06 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019c0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	695b      	ldr	r3, [r3, #20]
 80019cc:	613b      	str	r3, [r7, #16]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	2319      	movs	r3, #25
 80019de:	2201      	movs	r2, #1
 80019e0:	4921      	ldr	r1, [pc, #132]	; (8001a68 <HAL_I2C_IsDeviceReady+0x254>)
 80019e2:	68f8      	ldr	r0, [r7, #12]
 80019e4:	f000 f8c6 	bl	8001b74 <I2C_WaitOnFlagUntilTimeout>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e036      	b.n	8001a60 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2220      	movs	r2, #32
 80019f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001a02:	2300      	movs	r3, #0
 8001a04:	e02c      	b.n	8001a60 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a14:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a1e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	2319      	movs	r3, #25
 8001a26:	2201      	movs	r2, #1
 8001a28:	490f      	ldr	r1, [pc, #60]	; (8001a68 <HAL_I2C_IsDeviceReady+0x254>)
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	f000 f8a2 	bl	8001b74 <I2C_WaitOnFlagUntilTimeout>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e012      	b.n	8001a60 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	f4ff af32 	bcc.w	80018ae <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2220      	movs	r2, #32
 8001a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e000      	b.n	8001a60 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001a5e:	2302      	movs	r3, #2
  }
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3720      	adds	r7, #32
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	00100002 	.word	0x00100002
 8001a6c:	ffff0000 	.word	0xffff0000

08001a70 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b088      	sub	sp, #32
 8001a74:	af02      	add	r7, sp, #8
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	607a      	str	r2, [r7, #4]
 8001a7a:	603b      	str	r3, [r7, #0]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a84:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	2b08      	cmp	r3, #8
 8001a8a:	d006      	beq.n	8001a9a <I2C_MasterRequestWrite+0x2a>
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d003      	beq.n	8001a9a <I2C_MasterRequestWrite+0x2a>
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001a98:	d108      	bne.n	8001aac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	e00b      	b.n	8001ac4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab0:	2b12      	cmp	r3, #18
 8001ab2:	d107      	bne.n	8001ac4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ac2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	f000 f84f 	bl	8001b74 <I2C_WaitOnFlagUntilTimeout>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d00d      	beq.n	8001af8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001aea:	d103      	bne.n	8001af4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001af2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e035      	b.n	8001b64 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b00:	d108      	bne.n	8001b14 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b02:	897b      	ldrh	r3, [r7, #10]
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	461a      	mov	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b10:	611a      	str	r2, [r3, #16]
 8001b12:	e01b      	b.n	8001b4c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001b14:	897b      	ldrh	r3, [r7, #10]
 8001b16:	11db      	asrs	r3, r3, #7
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	f003 0306 	and.w	r3, r3, #6
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	f063 030f 	orn	r3, r3, #15
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	490e      	ldr	r1, [pc, #56]	; (8001b6c <I2C_MasterRequestWrite+0xfc>)
 8001b32:	68f8      	ldr	r0, [r7, #12]
 8001b34:	f000 f875 	bl	8001c22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e010      	b.n	8001b64 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001b42:	897b      	ldrh	r3, [r7, #10]
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	4907      	ldr	r1, [pc, #28]	; (8001b70 <I2C_MasterRequestWrite+0x100>)
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f000 f865 	bl	8001c22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e000      	b.n	8001b64 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	00010008 	.word	0x00010008
 8001b70:	00010002 	.word	0x00010002

08001b74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	603b      	str	r3, [r7, #0]
 8001b80:	4613      	mov	r3, r2
 8001b82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b84:	e025      	b.n	8001bd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b8c:	d021      	beq.n	8001bd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b8e:	f7ff f98d 	bl	8000eac <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d302      	bcc.n	8001ba4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d116      	bne.n	8001bd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2220      	movs	r2, #32
 8001bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	f043 0220 	orr.w	r2, r3, #32
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e023      	b.n	8001c1a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	0c1b      	lsrs	r3, r3, #16
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d10d      	bne.n	8001bf8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	43da      	mvns	r2, r3
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	4013      	ands	r3, r2
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	bf0c      	ite	eq
 8001bee:	2301      	moveq	r3, #1
 8001bf0:	2300      	movne	r3, #0
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	e00c      	b.n	8001c12 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	43da      	mvns	r2, r3
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	4013      	ands	r3, r2
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	bf0c      	ite	eq
 8001c0a:	2301      	moveq	r3, #1
 8001c0c:	2300      	movne	r3, #0
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	461a      	mov	r2, r3
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d0b6      	beq.n	8001b86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b084      	sub	sp, #16
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	60f8      	str	r0, [r7, #12]
 8001c2a:	60b9      	str	r1, [r7, #8]
 8001c2c:	607a      	str	r2, [r7, #4]
 8001c2e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c30:	e051      	b.n	8001cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	695b      	ldr	r3, [r3, #20]
 8001c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c40:	d123      	bne.n	8001c8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c50:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c5a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2220      	movs	r2, #32
 8001c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	f043 0204 	orr.w	r2, r3, #4
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e046      	b.n	8001d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c90:	d021      	beq.n	8001cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c92:	f7ff f90b 	bl	8000eac <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d302      	bcc.n	8001ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d116      	bne.n	8001cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2200      	movs	r2, #0
 8001cac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2220      	movs	r2, #32
 8001cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	f043 0220 	orr.w	r2, r3, #32
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e020      	b.n	8001d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	0c1b      	lsrs	r3, r3, #16
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d10c      	bne.n	8001cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	43da      	mvns	r2, r3
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	4013      	ands	r3, r2
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	bf14      	ite	ne
 8001cf2:	2301      	movne	r3, #1
 8001cf4:	2300      	moveq	r3, #0
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	e00b      	b.n	8001d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	43da      	mvns	r2, r3
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	4013      	ands	r3, r2
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	bf14      	ite	ne
 8001d0c:	2301      	movne	r3, #1
 8001d0e:	2300      	moveq	r3, #0
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d18d      	bne.n	8001c32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d2c:	e02d      	b.n	8001d8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f000 f878 	bl	8001e24 <I2C_IsAcknowledgeFailed>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e02d      	b.n	8001d9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d44:	d021      	beq.n	8001d8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d46:	f7ff f8b1 	bl	8000eac <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	68ba      	ldr	r2, [r7, #8]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d302      	bcc.n	8001d5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d116      	bne.n	8001d8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2220      	movs	r2, #32
 8001d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	f043 0220 	orr.w	r2, r3, #32
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e007      	b.n	8001d9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	695b      	ldr	r3, [r3, #20]
 8001d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d94:	2b80      	cmp	r3, #128	; 0x80
 8001d96:	d1ca      	bne.n	8001d2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b084      	sub	sp, #16
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	60f8      	str	r0, [r7, #12]
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001dae:	e02d      	b.n	8001e0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001db0:	68f8      	ldr	r0, [r7, #12]
 8001db2:	f000 f837 	bl	8001e24 <I2C_IsAcknowledgeFailed>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e02d      	b.n	8001e1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc6:	d021      	beq.n	8001e0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dc8:	f7ff f870 	bl	8000eac <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	68ba      	ldr	r2, [r7, #8]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d302      	bcc.n	8001dde <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d116      	bne.n	8001e0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2200      	movs	r2, #0
 8001de2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2220      	movs	r2, #32
 8001de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df8:	f043 0220 	orr.w	r2, r3, #32
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e007      	b.n	8001e1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	f003 0304 	and.w	r3, r3, #4
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d1ca      	bne.n	8001db0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e3a:	d11b      	bne.n	8001e74 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e44:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2220      	movs	r2, #32
 8001e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e60:	f043 0204 	orr.w	r2, r3, #4
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e000      	b.n	8001e76 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr

08001e80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e272      	b.n	8002378 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 8087 	beq.w	8001fae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ea0:	4b92      	ldr	r3, [pc, #584]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 030c 	and.w	r3, r3, #12
 8001ea8:	2b04      	cmp	r3, #4
 8001eaa:	d00c      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001eac:	4b8f      	ldr	r3, [pc, #572]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 030c 	and.w	r3, r3, #12
 8001eb4:	2b08      	cmp	r3, #8
 8001eb6:	d112      	bne.n	8001ede <HAL_RCC_OscConfig+0x5e>
 8001eb8:	4b8c      	ldr	r3, [pc, #560]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ec4:	d10b      	bne.n	8001ede <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec6:	4b89      	ldr	r3, [pc, #548]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d06c      	beq.n	8001fac <HAL_RCC_OscConfig+0x12c>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d168      	bne.n	8001fac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e24c      	b.n	8002378 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee6:	d106      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x76>
 8001ee8:	4b80      	ldr	r3, [pc, #512]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a7f      	ldr	r2, [pc, #508]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001eee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef2:	6013      	str	r3, [r2, #0]
 8001ef4:	e02e      	b.n	8001f54 <HAL_RCC_OscConfig+0xd4>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10c      	bne.n	8001f18 <HAL_RCC_OscConfig+0x98>
 8001efe:	4b7b      	ldr	r3, [pc, #492]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a7a      	ldr	r2, [pc, #488]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	4b78      	ldr	r3, [pc, #480]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a77      	ldr	r2, [pc, #476]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f14:	6013      	str	r3, [r2, #0]
 8001f16:	e01d      	b.n	8001f54 <HAL_RCC_OscConfig+0xd4>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f20:	d10c      	bne.n	8001f3c <HAL_RCC_OscConfig+0xbc>
 8001f22:	4b72      	ldr	r3, [pc, #456]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a71      	ldr	r2, [pc, #452]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	4b6f      	ldr	r3, [pc, #444]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a6e      	ldr	r2, [pc, #440]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f38:	6013      	str	r3, [r2, #0]
 8001f3a:	e00b      	b.n	8001f54 <HAL_RCC_OscConfig+0xd4>
 8001f3c:	4b6b      	ldr	r3, [pc, #428]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a6a      	ldr	r2, [pc, #424]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f46:	6013      	str	r3, [r2, #0]
 8001f48:	4b68      	ldr	r3, [pc, #416]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a67      	ldr	r2, [pc, #412]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d013      	beq.n	8001f84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5c:	f7fe ffa6 	bl	8000eac <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f64:	f7fe ffa2 	bl	8000eac <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b64      	cmp	r3, #100	; 0x64
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e200      	b.n	8002378 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f76:	4b5d      	ldr	r3, [pc, #372]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0f0      	beq.n	8001f64 <HAL_RCC_OscConfig+0xe4>
 8001f82:	e014      	b.n	8001fae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f84:	f7fe ff92 	bl	8000eac <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f8c:	f7fe ff8e 	bl	8000eac <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b64      	cmp	r3, #100	; 0x64
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e1ec      	b.n	8002378 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f9e:	4b53      	ldr	r3, [pc, #332]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1f0      	bne.n	8001f8c <HAL_RCC_OscConfig+0x10c>
 8001faa:	e000      	b.n	8001fae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d063      	beq.n	8002082 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fba:	4b4c      	ldr	r3, [pc, #304]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 030c 	and.w	r3, r3, #12
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00b      	beq.n	8001fde <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fc6:	4b49      	ldr	r3, [pc, #292]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f003 030c 	and.w	r3, r3, #12
 8001fce:	2b08      	cmp	r3, #8
 8001fd0:	d11c      	bne.n	800200c <HAL_RCC_OscConfig+0x18c>
 8001fd2:	4b46      	ldr	r3, [pc, #280]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d116      	bne.n	800200c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fde:	4b43      	ldr	r3, [pc, #268]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d005      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x176>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d001      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e1c0      	b.n	8002378 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff6:	4b3d      	ldr	r3, [pc, #244]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	4939      	ldr	r1, [pc, #228]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8002006:	4313      	orrs	r3, r2
 8002008:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800200a:	e03a      	b.n	8002082 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d020      	beq.n	8002056 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002014:	4b36      	ldr	r3, [pc, #216]	; (80020f0 <HAL_RCC_OscConfig+0x270>)
 8002016:	2201      	movs	r2, #1
 8002018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201a:	f7fe ff47 	bl	8000eac <HAL_GetTick>
 800201e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002020:	e008      	b.n	8002034 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002022:	f7fe ff43 	bl	8000eac <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e1a1      	b.n	8002378 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002034:	4b2d      	ldr	r3, [pc, #180]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d0f0      	beq.n	8002022 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002040:	4b2a      	ldr	r3, [pc, #168]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4927      	ldr	r1, [pc, #156]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8002050:	4313      	orrs	r3, r2
 8002052:	600b      	str	r3, [r1, #0]
 8002054:	e015      	b.n	8002082 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002056:	4b26      	ldr	r3, [pc, #152]	; (80020f0 <HAL_RCC_OscConfig+0x270>)
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205c:	f7fe ff26 	bl	8000eac <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002064:	f7fe ff22 	bl	8000eac <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e180      	b.n	8002378 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002076:	4b1d      	ldr	r3, [pc, #116]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1f0      	bne.n	8002064 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0308 	and.w	r3, r3, #8
 800208a:	2b00      	cmp	r3, #0
 800208c:	d03a      	beq.n	8002104 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d019      	beq.n	80020ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002096:	4b17      	ldr	r3, [pc, #92]	; (80020f4 <HAL_RCC_OscConfig+0x274>)
 8002098:	2201      	movs	r2, #1
 800209a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800209c:	f7fe ff06 	bl	8000eac <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020a4:	f7fe ff02 	bl	8000eac <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e160      	b.n	8002378 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020b6:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 80020b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d0f0      	beq.n	80020a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020c2:	2001      	movs	r0, #1
 80020c4:	f000 fac4 	bl	8002650 <RCC_Delay>
 80020c8:	e01c      	b.n	8002104 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ca:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <HAL_RCC_OscConfig+0x274>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d0:	f7fe feec 	bl	8000eac <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d6:	e00f      	b.n	80020f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020d8:	f7fe fee8 	bl	8000eac <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d908      	bls.n	80020f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e146      	b.n	8002378 <HAL_RCC_OscConfig+0x4f8>
 80020ea:	bf00      	nop
 80020ec:	40021000 	.word	0x40021000
 80020f0:	42420000 	.word	0x42420000
 80020f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f8:	4b92      	ldr	r3, [pc, #584]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 80020fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1e9      	bne.n	80020d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 80a6 	beq.w	800225e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002112:	2300      	movs	r3, #0
 8002114:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002116:	4b8b      	ldr	r3, [pc, #556]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10d      	bne.n	800213e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002122:	4b88      	ldr	r3, [pc, #544]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	4a87      	ldr	r2, [pc, #540]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 8002128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800212c:	61d3      	str	r3, [r2, #28]
 800212e:	4b85      	ldr	r3, [pc, #532]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002136:	60bb      	str	r3, [r7, #8]
 8002138:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800213a:	2301      	movs	r3, #1
 800213c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800213e:	4b82      	ldr	r3, [pc, #520]	; (8002348 <HAL_RCC_OscConfig+0x4c8>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002146:	2b00      	cmp	r3, #0
 8002148:	d118      	bne.n	800217c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800214a:	4b7f      	ldr	r3, [pc, #508]	; (8002348 <HAL_RCC_OscConfig+0x4c8>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a7e      	ldr	r2, [pc, #504]	; (8002348 <HAL_RCC_OscConfig+0x4c8>)
 8002150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002154:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002156:	f7fe fea9 	bl	8000eac <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800215c:	e008      	b.n	8002170 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800215e:	f7fe fea5 	bl	8000eac <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b64      	cmp	r3, #100	; 0x64
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e103      	b.n	8002378 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002170:	4b75      	ldr	r3, [pc, #468]	; (8002348 <HAL_RCC_OscConfig+0x4c8>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002178:	2b00      	cmp	r3, #0
 800217a:	d0f0      	beq.n	800215e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d106      	bne.n	8002192 <HAL_RCC_OscConfig+0x312>
 8002184:	4b6f      	ldr	r3, [pc, #444]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	4a6e      	ldr	r2, [pc, #440]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	6213      	str	r3, [r2, #32]
 8002190:	e02d      	b.n	80021ee <HAL_RCC_OscConfig+0x36e>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10c      	bne.n	80021b4 <HAL_RCC_OscConfig+0x334>
 800219a:	4b6a      	ldr	r3, [pc, #424]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	4a69      	ldr	r2, [pc, #420]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 80021a0:	f023 0301 	bic.w	r3, r3, #1
 80021a4:	6213      	str	r3, [r2, #32]
 80021a6:	4b67      	ldr	r3, [pc, #412]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	4a66      	ldr	r2, [pc, #408]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 80021ac:	f023 0304 	bic.w	r3, r3, #4
 80021b0:	6213      	str	r3, [r2, #32]
 80021b2:	e01c      	b.n	80021ee <HAL_RCC_OscConfig+0x36e>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	2b05      	cmp	r3, #5
 80021ba:	d10c      	bne.n	80021d6 <HAL_RCC_OscConfig+0x356>
 80021bc:	4b61      	ldr	r3, [pc, #388]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	4a60      	ldr	r2, [pc, #384]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 80021c2:	f043 0304 	orr.w	r3, r3, #4
 80021c6:	6213      	str	r3, [r2, #32]
 80021c8:	4b5e      	ldr	r3, [pc, #376]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	4a5d      	ldr	r2, [pc, #372]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 80021ce:	f043 0301 	orr.w	r3, r3, #1
 80021d2:	6213      	str	r3, [r2, #32]
 80021d4:	e00b      	b.n	80021ee <HAL_RCC_OscConfig+0x36e>
 80021d6:	4b5b      	ldr	r3, [pc, #364]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	4a5a      	ldr	r2, [pc, #360]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 80021dc:	f023 0301 	bic.w	r3, r3, #1
 80021e0:	6213      	str	r3, [r2, #32]
 80021e2:	4b58      	ldr	r3, [pc, #352]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	4a57      	ldr	r2, [pc, #348]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 80021e8:	f023 0304 	bic.w	r3, r3, #4
 80021ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d015      	beq.n	8002222 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f6:	f7fe fe59 	bl	8000eac <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021fc:	e00a      	b.n	8002214 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021fe:	f7fe fe55 	bl	8000eac <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	f241 3288 	movw	r2, #5000	; 0x1388
 800220c:	4293      	cmp	r3, r2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e0b1      	b.n	8002378 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002214:	4b4b      	ldr	r3, [pc, #300]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d0ee      	beq.n	80021fe <HAL_RCC_OscConfig+0x37e>
 8002220:	e014      	b.n	800224c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002222:	f7fe fe43 	bl	8000eac <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002228:	e00a      	b.n	8002240 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800222a:	f7fe fe3f 	bl	8000eac <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	f241 3288 	movw	r2, #5000	; 0x1388
 8002238:	4293      	cmp	r3, r2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e09b      	b.n	8002378 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002240:	4b40      	ldr	r3, [pc, #256]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1ee      	bne.n	800222a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800224c:	7dfb      	ldrb	r3, [r7, #23]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d105      	bne.n	800225e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002252:	4b3c      	ldr	r3, [pc, #240]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	4a3b      	ldr	r2, [pc, #236]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 8002258:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800225c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 8087 	beq.w	8002376 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002268:	4b36      	ldr	r3, [pc, #216]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 030c 	and.w	r3, r3, #12
 8002270:	2b08      	cmp	r3, #8
 8002272:	d061      	beq.n	8002338 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	69db      	ldr	r3, [r3, #28]
 8002278:	2b02      	cmp	r3, #2
 800227a:	d146      	bne.n	800230a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800227c:	4b33      	ldr	r3, [pc, #204]	; (800234c <HAL_RCC_OscConfig+0x4cc>)
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002282:	f7fe fe13 	bl	8000eac <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800228a:	f7fe fe0f 	bl	8000eac <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e06d      	b.n	8002378 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800229c:	4b29      	ldr	r3, [pc, #164]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1f0      	bne.n	800228a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b0:	d108      	bne.n	80022c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022b2:	4b24      	ldr	r3, [pc, #144]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	4921      	ldr	r1, [pc, #132]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022c4:	4b1f      	ldr	r3, [pc, #124]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a19      	ldr	r1, [r3, #32]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d4:	430b      	orrs	r3, r1
 80022d6:	491b      	ldr	r1, [pc, #108]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022dc:	4b1b      	ldr	r3, [pc, #108]	; (800234c <HAL_RCC_OscConfig+0x4cc>)
 80022de:	2201      	movs	r2, #1
 80022e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e2:	f7fe fde3 	bl	8000eac <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022e8:	e008      	b.n	80022fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ea:	f7fe fddf 	bl	8000eac <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e03d      	b.n	8002378 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022fc:	4b11      	ldr	r3, [pc, #68]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0f0      	beq.n	80022ea <HAL_RCC_OscConfig+0x46a>
 8002308:	e035      	b.n	8002376 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800230a:	4b10      	ldr	r3, [pc, #64]	; (800234c <HAL_RCC_OscConfig+0x4cc>)
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002310:	f7fe fdcc 	bl	8000eac <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002318:	f7fe fdc8 	bl	8000eac <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e026      	b.n	8002378 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800232a:	4b06      	ldr	r3, [pc, #24]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1f0      	bne.n	8002318 <HAL_RCC_OscConfig+0x498>
 8002336:	e01e      	b.n	8002376 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	69db      	ldr	r3, [r3, #28]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d107      	bne.n	8002350 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e019      	b.n	8002378 <HAL_RCC_OscConfig+0x4f8>
 8002344:	40021000 	.word	0x40021000
 8002348:	40007000 	.word	0x40007000
 800234c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002350:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <HAL_RCC_OscConfig+0x500>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	429a      	cmp	r2, r3
 8002362:	d106      	bne.n	8002372 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800236e:	429a      	cmp	r2, r3
 8002370:	d001      	beq.n	8002376 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e000      	b.n	8002378 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3718      	adds	r7, #24
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40021000 	.word	0x40021000

08002384 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d101      	bne.n	8002398 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e0d0      	b.n	800253a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002398:	4b6a      	ldr	r3, [pc, #424]	; (8002544 <HAL_RCC_ClockConfig+0x1c0>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d910      	bls.n	80023c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a6:	4b67      	ldr	r3, [pc, #412]	; (8002544 <HAL_RCC_ClockConfig+0x1c0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f023 0207 	bic.w	r2, r3, #7
 80023ae:	4965      	ldr	r1, [pc, #404]	; (8002544 <HAL_RCC_ClockConfig+0x1c0>)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b6:	4b63      	ldr	r3, [pc, #396]	; (8002544 <HAL_RCC_ClockConfig+0x1c0>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d001      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e0b8      	b.n	800253a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d020      	beq.n	8002416 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0304 	and.w	r3, r3, #4
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d005      	beq.n	80023ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023e0:	4b59      	ldr	r3, [pc, #356]	; (8002548 <HAL_RCC_ClockConfig+0x1c4>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	4a58      	ldr	r2, [pc, #352]	; (8002548 <HAL_RCC_ClockConfig+0x1c4>)
 80023e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0308 	and.w	r3, r3, #8
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d005      	beq.n	8002404 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023f8:	4b53      	ldr	r3, [pc, #332]	; (8002548 <HAL_RCC_ClockConfig+0x1c4>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	4a52      	ldr	r2, [pc, #328]	; (8002548 <HAL_RCC_ClockConfig+0x1c4>)
 80023fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002402:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002404:	4b50      	ldr	r3, [pc, #320]	; (8002548 <HAL_RCC_ClockConfig+0x1c4>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	494d      	ldr	r1, [pc, #308]	; (8002548 <HAL_RCC_ClockConfig+0x1c4>)
 8002412:	4313      	orrs	r3, r2
 8002414:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b00      	cmp	r3, #0
 8002420:	d040      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d107      	bne.n	800243a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242a:	4b47      	ldr	r3, [pc, #284]	; (8002548 <HAL_RCC_ClockConfig+0x1c4>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d115      	bne.n	8002462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e07f      	b.n	800253a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b02      	cmp	r3, #2
 8002440:	d107      	bne.n	8002452 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002442:	4b41      	ldr	r3, [pc, #260]	; (8002548 <HAL_RCC_ClockConfig+0x1c4>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d109      	bne.n	8002462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e073      	b.n	800253a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002452:	4b3d      	ldr	r3, [pc, #244]	; (8002548 <HAL_RCC_ClockConfig+0x1c4>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e06b      	b.n	800253a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002462:	4b39      	ldr	r3, [pc, #228]	; (8002548 <HAL_RCC_ClockConfig+0x1c4>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f023 0203 	bic.w	r2, r3, #3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	4936      	ldr	r1, [pc, #216]	; (8002548 <HAL_RCC_ClockConfig+0x1c4>)
 8002470:	4313      	orrs	r3, r2
 8002472:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002474:	f7fe fd1a 	bl	8000eac <HAL_GetTick>
 8002478:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247a:	e00a      	b.n	8002492 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800247c:	f7fe fd16 	bl	8000eac <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	f241 3288 	movw	r2, #5000	; 0x1388
 800248a:	4293      	cmp	r3, r2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e053      	b.n	800253a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002492:	4b2d      	ldr	r3, [pc, #180]	; (8002548 <HAL_RCC_ClockConfig+0x1c4>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f003 020c 	and.w	r2, r3, #12
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d1eb      	bne.n	800247c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024a4:	4b27      	ldr	r3, [pc, #156]	; (8002544 <HAL_RCC_ClockConfig+0x1c0>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d210      	bcs.n	80024d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b2:	4b24      	ldr	r3, [pc, #144]	; (8002544 <HAL_RCC_ClockConfig+0x1c0>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f023 0207 	bic.w	r2, r3, #7
 80024ba:	4922      	ldr	r1, [pc, #136]	; (8002544 <HAL_RCC_ClockConfig+0x1c0>)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	4313      	orrs	r3, r2
 80024c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c2:	4b20      	ldr	r3, [pc, #128]	; (8002544 <HAL_RCC_ClockConfig+0x1c0>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d001      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e032      	b.n	800253a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d008      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024e0:	4b19      	ldr	r3, [pc, #100]	; (8002548 <HAL_RCC_ClockConfig+0x1c4>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	4916      	ldr	r1, [pc, #88]	; (8002548 <HAL_RCC_ClockConfig+0x1c4>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d009      	beq.n	8002512 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024fe:	4b12      	ldr	r3, [pc, #72]	; (8002548 <HAL_RCC_ClockConfig+0x1c4>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	490e      	ldr	r1, [pc, #56]	; (8002548 <HAL_RCC_ClockConfig+0x1c4>)
 800250e:	4313      	orrs	r3, r2
 8002510:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002512:	f000 f821 	bl	8002558 <HAL_RCC_GetSysClockFreq>
 8002516:	4602      	mov	r2, r0
 8002518:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <HAL_RCC_ClockConfig+0x1c4>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	091b      	lsrs	r3, r3, #4
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	490a      	ldr	r1, [pc, #40]	; (800254c <HAL_RCC_ClockConfig+0x1c8>)
 8002524:	5ccb      	ldrb	r3, [r1, r3]
 8002526:	fa22 f303 	lsr.w	r3, r2, r3
 800252a:	4a09      	ldr	r2, [pc, #36]	; (8002550 <HAL_RCC_ClockConfig+0x1cc>)
 800252c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800252e:	4b09      	ldr	r3, [pc, #36]	; (8002554 <HAL_RCC_ClockConfig+0x1d0>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f7fe fc78 	bl	8000e28 <HAL_InitTick>

  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40022000 	.word	0x40022000
 8002548:	40021000 	.word	0x40021000
 800254c:	08004360 	.word	0x08004360
 8002550:	20000014 	.word	0x20000014
 8002554:	20000018 	.word	0x20000018

08002558 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002558:	b490      	push	{r4, r7}
 800255a:	b08a      	sub	sp, #40	; 0x28
 800255c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800255e:	4b29      	ldr	r3, [pc, #164]	; (8002604 <HAL_RCC_GetSysClockFreq+0xac>)
 8002560:	1d3c      	adds	r4, r7, #4
 8002562:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002564:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002568:	f240 2301 	movw	r3, #513	; 0x201
 800256c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800256e:	2300      	movs	r3, #0
 8002570:	61fb      	str	r3, [r7, #28]
 8002572:	2300      	movs	r3, #0
 8002574:	61bb      	str	r3, [r7, #24]
 8002576:	2300      	movs	r3, #0
 8002578:	627b      	str	r3, [r7, #36]	; 0x24
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800257e:	2300      	movs	r3, #0
 8002580:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002582:	4b21      	ldr	r3, [pc, #132]	; (8002608 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f003 030c 	and.w	r3, r3, #12
 800258e:	2b04      	cmp	r3, #4
 8002590:	d002      	beq.n	8002598 <HAL_RCC_GetSysClockFreq+0x40>
 8002592:	2b08      	cmp	r3, #8
 8002594:	d003      	beq.n	800259e <HAL_RCC_GetSysClockFreq+0x46>
 8002596:	e02b      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002598:	4b1c      	ldr	r3, [pc, #112]	; (800260c <HAL_RCC_GetSysClockFreq+0xb4>)
 800259a:	623b      	str	r3, [r7, #32]
      break;
 800259c:	e02b      	b.n	80025f6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	0c9b      	lsrs	r3, r3, #18
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	3328      	adds	r3, #40	; 0x28
 80025a8:	443b      	add	r3, r7
 80025aa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80025ae:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d012      	beq.n	80025e0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025ba:	4b13      	ldr	r3, [pc, #76]	; (8002608 <HAL_RCC_GetSysClockFreq+0xb0>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	0c5b      	lsrs	r3, r3, #17
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	3328      	adds	r3, #40	; 0x28
 80025c6:	443b      	add	r3, r7
 80025c8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80025cc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	4a0e      	ldr	r2, [pc, #56]	; (800260c <HAL_RCC_GetSysClockFreq+0xb4>)
 80025d2:	fb03 f202 	mul.w	r2, r3, r2
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025dc:	627b      	str	r3, [r7, #36]	; 0x24
 80025de:	e004      	b.n	80025ea <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	4a0b      	ldr	r2, [pc, #44]	; (8002610 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025e4:	fb02 f303 	mul.w	r3, r2, r3
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	623b      	str	r3, [r7, #32]
      break;
 80025ee:	e002      	b.n	80025f6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025f0:	4b06      	ldr	r3, [pc, #24]	; (800260c <HAL_RCC_GetSysClockFreq+0xb4>)
 80025f2:	623b      	str	r3, [r7, #32]
      break;
 80025f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025f6:	6a3b      	ldr	r3, [r7, #32]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3728      	adds	r7, #40	; 0x28
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc90      	pop	{r4, r7}
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	08003004 	.word	0x08003004
 8002608:	40021000 	.word	0x40021000
 800260c:	007a1200 	.word	0x007a1200
 8002610:	003d0900 	.word	0x003d0900

08002614 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002618:	4b02      	ldr	r3, [pc, #8]	; (8002624 <HAL_RCC_GetHCLKFreq+0x10>)
 800261a:	681b      	ldr	r3, [r3, #0]
}
 800261c:	4618      	mov	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr
 8002624:	20000014 	.word	0x20000014

08002628 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800262c:	f7ff fff2 	bl	8002614 <HAL_RCC_GetHCLKFreq>
 8002630:	4602      	mov	r2, r0
 8002632:	4b05      	ldr	r3, [pc, #20]	; (8002648 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	0a1b      	lsrs	r3, r3, #8
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	4903      	ldr	r1, [pc, #12]	; (800264c <HAL_RCC_GetPCLK1Freq+0x24>)
 800263e:	5ccb      	ldrb	r3, [r1, r3]
 8002640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002644:	4618      	mov	r0, r3
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40021000 	.word	0x40021000
 800264c:	08004370 	.word	0x08004370

08002650 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002658:	4b0a      	ldr	r3, [pc, #40]	; (8002684 <RCC_Delay+0x34>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a0a      	ldr	r2, [pc, #40]	; (8002688 <RCC_Delay+0x38>)
 800265e:	fba2 2303 	umull	r2, r3, r2, r3
 8002662:	0a5b      	lsrs	r3, r3, #9
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	fb02 f303 	mul.w	r3, r2, r3
 800266a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800266c:	bf00      	nop
  }
  while (Delay --);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	1e5a      	subs	r2, r3, #1
 8002672:	60fa      	str	r2, [r7, #12]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1f9      	bne.n	800266c <RCC_Delay+0x1c>
}
 8002678:	bf00      	nop
 800267a:	bf00      	nop
 800267c:	3714      	adds	r7, #20
 800267e:	46bd      	mov	sp, r7
 8002680:	bc80      	pop	{r7}
 8002682:	4770      	bx	lr
 8002684:	20000014 	.word	0x20000014
 8002688:	10624dd3 	.word	0x10624dd3

0800268c <__errno>:
 800268c:	4b01      	ldr	r3, [pc, #4]	; (8002694 <__errno+0x8>)
 800268e:	6818      	ldr	r0, [r3, #0]
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	20000020 	.word	0x20000020

08002698 <__libc_init_array>:
 8002698:	b570      	push	{r4, r5, r6, lr}
 800269a:	2600      	movs	r6, #0
 800269c:	4d0c      	ldr	r5, [pc, #48]	; (80026d0 <__libc_init_array+0x38>)
 800269e:	4c0d      	ldr	r4, [pc, #52]	; (80026d4 <__libc_init_array+0x3c>)
 80026a0:	1b64      	subs	r4, r4, r5
 80026a2:	10a4      	asrs	r4, r4, #2
 80026a4:	42a6      	cmp	r6, r4
 80026a6:	d109      	bne.n	80026bc <__libc_init_array+0x24>
 80026a8:	f000 fc9c 	bl	8002fe4 <_init>
 80026ac:	2600      	movs	r6, #0
 80026ae:	4d0a      	ldr	r5, [pc, #40]	; (80026d8 <__libc_init_array+0x40>)
 80026b0:	4c0a      	ldr	r4, [pc, #40]	; (80026dc <__libc_init_array+0x44>)
 80026b2:	1b64      	subs	r4, r4, r5
 80026b4:	10a4      	asrs	r4, r4, #2
 80026b6:	42a6      	cmp	r6, r4
 80026b8:	d105      	bne.n	80026c6 <__libc_init_array+0x2e>
 80026ba:	bd70      	pop	{r4, r5, r6, pc}
 80026bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80026c0:	4798      	blx	r3
 80026c2:	3601      	adds	r6, #1
 80026c4:	e7ee      	b.n	80026a4 <__libc_init_array+0xc>
 80026c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80026ca:	4798      	blx	r3
 80026cc:	3601      	adds	r6, #1
 80026ce:	e7f2      	b.n	80026b6 <__libc_init_array+0x1e>
 80026d0:	080043ac 	.word	0x080043ac
 80026d4:	080043ac 	.word	0x080043ac
 80026d8:	080043ac 	.word	0x080043ac
 80026dc:	080043b0 	.word	0x080043b0

080026e0 <memset>:
 80026e0:	4603      	mov	r3, r0
 80026e2:	4402      	add	r2, r0
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d100      	bne.n	80026ea <memset+0xa>
 80026e8:	4770      	bx	lr
 80026ea:	f803 1b01 	strb.w	r1, [r3], #1
 80026ee:	e7f9      	b.n	80026e4 <memset+0x4>

080026f0 <siprintf>:
 80026f0:	b40e      	push	{r1, r2, r3}
 80026f2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80026f6:	b500      	push	{lr}
 80026f8:	b09c      	sub	sp, #112	; 0x70
 80026fa:	ab1d      	add	r3, sp, #116	; 0x74
 80026fc:	9002      	str	r0, [sp, #8]
 80026fe:	9006      	str	r0, [sp, #24]
 8002700:	9107      	str	r1, [sp, #28]
 8002702:	9104      	str	r1, [sp, #16]
 8002704:	4808      	ldr	r0, [pc, #32]	; (8002728 <siprintf+0x38>)
 8002706:	4909      	ldr	r1, [pc, #36]	; (800272c <siprintf+0x3c>)
 8002708:	f853 2b04 	ldr.w	r2, [r3], #4
 800270c:	9105      	str	r1, [sp, #20]
 800270e:	6800      	ldr	r0, [r0, #0]
 8002710:	a902      	add	r1, sp, #8
 8002712:	9301      	str	r3, [sp, #4]
 8002714:	f000 f868 	bl	80027e8 <_svfiprintf_r>
 8002718:	2200      	movs	r2, #0
 800271a:	9b02      	ldr	r3, [sp, #8]
 800271c:	701a      	strb	r2, [r3, #0]
 800271e:	b01c      	add	sp, #112	; 0x70
 8002720:	f85d eb04 	ldr.w	lr, [sp], #4
 8002724:	b003      	add	sp, #12
 8002726:	4770      	bx	lr
 8002728:	20000020 	.word	0x20000020
 800272c:	ffff0208 	.word	0xffff0208

08002730 <__ssputs_r>:
 8002730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002734:	688e      	ldr	r6, [r1, #8]
 8002736:	4682      	mov	sl, r0
 8002738:	429e      	cmp	r6, r3
 800273a:	460c      	mov	r4, r1
 800273c:	4690      	mov	r8, r2
 800273e:	461f      	mov	r7, r3
 8002740:	d838      	bhi.n	80027b4 <__ssputs_r+0x84>
 8002742:	898a      	ldrh	r2, [r1, #12]
 8002744:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002748:	d032      	beq.n	80027b0 <__ssputs_r+0x80>
 800274a:	6825      	ldr	r5, [r4, #0]
 800274c:	6909      	ldr	r1, [r1, #16]
 800274e:	3301      	adds	r3, #1
 8002750:	eba5 0901 	sub.w	r9, r5, r1
 8002754:	6965      	ldr	r5, [r4, #20]
 8002756:	444b      	add	r3, r9
 8002758:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800275c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002760:	106d      	asrs	r5, r5, #1
 8002762:	429d      	cmp	r5, r3
 8002764:	bf38      	it	cc
 8002766:	461d      	movcc	r5, r3
 8002768:	0553      	lsls	r3, r2, #21
 800276a:	d531      	bpl.n	80027d0 <__ssputs_r+0xa0>
 800276c:	4629      	mov	r1, r5
 800276e:	f000 fb6f 	bl	8002e50 <_malloc_r>
 8002772:	4606      	mov	r6, r0
 8002774:	b950      	cbnz	r0, 800278c <__ssputs_r+0x5c>
 8002776:	230c      	movs	r3, #12
 8002778:	f04f 30ff 	mov.w	r0, #4294967295
 800277c:	f8ca 3000 	str.w	r3, [sl]
 8002780:	89a3      	ldrh	r3, [r4, #12]
 8002782:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002786:	81a3      	strh	r3, [r4, #12]
 8002788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800278c:	464a      	mov	r2, r9
 800278e:	6921      	ldr	r1, [r4, #16]
 8002790:	f000 face 	bl	8002d30 <memcpy>
 8002794:	89a3      	ldrh	r3, [r4, #12]
 8002796:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800279a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800279e:	81a3      	strh	r3, [r4, #12]
 80027a0:	6126      	str	r6, [r4, #16]
 80027a2:	444e      	add	r6, r9
 80027a4:	6026      	str	r6, [r4, #0]
 80027a6:	463e      	mov	r6, r7
 80027a8:	6165      	str	r5, [r4, #20]
 80027aa:	eba5 0509 	sub.w	r5, r5, r9
 80027ae:	60a5      	str	r5, [r4, #8]
 80027b0:	42be      	cmp	r6, r7
 80027b2:	d900      	bls.n	80027b6 <__ssputs_r+0x86>
 80027b4:	463e      	mov	r6, r7
 80027b6:	4632      	mov	r2, r6
 80027b8:	4641      	mov	r1, r8
 80027ba:	6820      	ldr	r0, [r4, #0]
 80027bc:	f000 fac6 	bl	8002d4c <memmove>
 80027c0:	68a3      	ldr	r3, [r4, #8]
 80027c2:	2000      	movs	r0, #0
 80027c4:	1b9b      	subs	r3, r3, r6
 80027c6:	60a3      	str	r3, [r4, #8]
 80027c8:	6823      	ldr	r3, [r4, #0]
 80027ca:	4433      	add	r3, r6
 80027cc:	6023      	str	r3, [r4, #0]
 80027ce:	e7db      	b.n	8002788 <__ssputs_r+0x58>
 80027d0:	462a      	mov	r2, r5
 80027d2:	f000 fbb1 	bl	8002f38 <_realloc_r>
 80027d6:	4606      	mov	r6, r0
 80027d8:	2800      	cmp	r0, #0
 80027da:	d1e1      	bne.n	80027a0 <__ssputs_r+0x70>
 80027dc:	4650      	mov	r0, sl
 80027de:	6921      	ldr	r1, [r4, #16]
 80027e0:	f000 face 	bl	8002d80 <_free_r>
 80027e4:	e7c7      	b.n	8002776 <__ssputs_r+0x46>
	...

080027e8 <_svfiprintf_r>:
 80027e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027ec:	4698      	mov	r8, r3
 80027ee:	898b      	ldrh	r3, [r1, #12]
 80027f0:	4607      	mov	r7, r0
 80027f2:	061b      	lsls	r3, r3, #24
 80027f4:	460d      	mov	r5, r1
 80027f6:	4614      	mov	r4, r2
 80027f8:	b09d      	sub	sp, #116	; 0x74
 80027fa:	d50e      	bpl.n	800281a <_svfiprintf_r+0x32>
 80027fc:	690b      	ldr	r3, [r1, #16]
 80027fe:	b963      	cbnz	r3, 800281a <_svfiprintf_r+0x32>
 8002800:	2140      	movs	r1, #64	; 0x40
 8002802:	f000 fb25 	bl	8002e50 <_malloc_r>
 8002806:	6028      	str	r0, [r5, #0]
 8002808:	6128      	str	r0, [r5, #16]
 800280a:	b920      	cbnz	r0, 8002816 <_svfiprintf_r+0x2e>
 800280c:	230c      	movs	r3, #12
 800280e:	603b      	str	r3, [r7, #0]
 8002810:	f04f 30ff 	mov.w	r0, #4294967295
 8002814:	e0d1      	b.n	80029ba <_svfiprintf_r+0x1d2>
 8002816:	2340      	movs	r3, #64	; 0x40
 8002818:	616b      	str	r3, [r5, #20]
 800281a:	2300      	movs	r3, #0
 800281c:	9309      	str	r3, [sp, #36]	; 0x24
 800281e:	2320      	movs	r3, #32
 8002820:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002824:	2330      	movs	r3, #48	; 0x30
 8002826:	f04f 0901 	mov.w	r9, #1
 800282a:	f8cd 800c 	str.w	r8, [sp, #12]
 800282e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80029d4 <_svfiprintf_r+0x1ec>
 8002832:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002836:	4623      	mov	r3, r4
 8002838:	469a      	mov	sl, r3
 800283a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800283e:	b10a      	cbz	r2, 8002844 <_svfiprintf_r+0x5c>
 8002840:	2a25      	cmp	r2, #37	; 0x25
 8002842:	d1f9      	bne.n	8002838 <_svfiprintf_r+0x50>
 8002844:	ebba 0b04 	subs.w	fp, sl, r4
 8002848:	d00b      	beq.n	8002862 <_svfiprintf_r+0x7a>
 800284a:	465b      	mov	r3, fp
 800284c:	4622      	mov	r2, r4
 800284e:	4629      	mov	r1, r5
 8002850:	4638      	mov	r0, r7
 8002852:	f7ff ff6d 	bl	8002730 <__ssputs_r>
 8002856:	3001      	adds	r0, #1
 8002858:	f000 80aa 	beq.w	80029b0 <_svfiprintf_r+0x1c8>
 800285c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800285e:	445a      	add	r2, fp
 8002860:	9209      	str	r2, [sp, #36]	; 0x24
 8002862:	f89a 3000 	ldrb.w	r3, [sl]
 8002866:	2b00      	cmp	r3, #0
 8002868:	f000 80a2 	beq.w	80029b0 <_svfiprintf_r+0x1c8>
 800286c:	2300      	movs	r3, #0
 800286e:	f04f 32ff 	mov.w	r2, #4294967295
 8002872:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002876:	f10a 0a01 	add.w	sl, sl, #1
 800287a:	9304      	str	r3, [sp, #16]
 800287c:	9307      	str	r3, [sp, #28]
 800287e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002882:	931a      	str	r3, [sp, #104]	; 0x68
 8002884:	4654      	mov	r4, sl
 8002886:	2205      	movs	r2, #5
 8002888:	f814 1b01 	ldrb.w	r1, [r4], #1
 800288c:	4851      	ldr	r0, [pc, #324]	; (80029d4 <_svfiprintf_r+0x1ec>)
 800288e:	f000 fa41 	bl	8002d14 <memchr>
 8002892:	9a04      	ldr	r2, [sp, #16]
 8002894:	b9d8      	cbnz	r0, 80028ce <_svfiprintf_r+0xe6>
 8002896:	06d0      	lsls	r0, r2, #27
 8002898:	bf44      	itt	mi
 800289a:	2320      	movmi	r3, #32
 800289c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80028a0:	0711      	lsls	r1, r2, #28
 80028a2:	bf44      	itt	mi
 80028a4:	232b      	movmi	r3, #43	; 0x2b
 80028a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80028aa:	f89a 3000 	ldrb.w	r3, [sl]
 80028ae:	2b2a      	cmp	r3, #42	; 0x2a
 80028b0:	d015      	beq.n	80028de <_svfiprintf_r+0xf6>
 80028b2:	4654      	mov	r4, sl
 80028b4:	2000      	movs	r0, #0
 80028b6:	f04f 0c0a 	mov.w	ip, #10
 80028ba:	9a07      	ldr	r2, [sp, #28]
 80028bc:	4621      	mov	r1, r4
 80028be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80028c2:	3b30      	subs	r3, #48	; 0x30
 80028c4:	2b09      	cmp	r3, #9
 80028c6:	d94e      	bls.n	8002966 <_svfiprintf_r+0x17e>
 80028c8:	b1b0      	cbz	r0, 80028f8 <_svfiprintf_r+0x110>
 80028ca:	9207      	str	r2, [sp, #28]
 80028cc:	e014      	b.n	80028f8 <_svfiprintf_r+0x110>
 80028ce:	eba0 0308 	sub.w	r3, r0, r8
 80028d2:	fa09 f303 	lsl.w	r3, r9, r3
 80028d6:	4313      	orrs	r3, r2
 80028d8:	46a2      	mov	sl, r4
 80028da:	9304      	str	r3, [sp, #16]
 80028dc:	e7d2      	b.n	8002884 <_svfiprintf_r+0x9c>
 80028de:	9b03      	ldr	r3, [sp, #12]
 80028e0:	1d19      	adds	r1, r3, #4
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	9103      	str	r1, [sp, #12]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	bfbb      	ittet	lt
 80028ea:	425b      	neglt	r3, r3
 80028ec:	f042 0202 	orrlt.w	r2, r2, #2
 80028f0:	9307      	strge	r3, [sp, #28]
 80028f2:	9307      	strlt	r3, [sp, #28]
 80028f4:	bfb8      	it	lt
 80028f6:	9204      	strlt	r2, [sp, #16]
 80028f8:	7823      	ldrb	r3, [r4, #0]
 80028fa:	2b2e      	cmp	r3, #46	; 0x2e
 80028fc:	d10c      	bne.n	8002918 <_svfiprintf_r+0x130>
 80028fe:	7863      	ldrb	r3, [r4, #1]
 8002900:	2b2a      	cmp	r3, #42	; 0x2a
 8002902:	d135      	bne.n	8002970 <_svfiprintf_r+0x188>
 8002904:	9b03      	ldr	r3, [sp, #12]
 8002906:	3402      	adds	r4, #2
 8002908:	1d1a      	adds	r2, r3, #4
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	9203      	str	r2, [sp, #12]
 800290e:	2b00      	cmp	r3, #0
 8002910:	bfb8      	it	lt
 8002912:	f04f 33ff 	movlt.w	r3, #4294967295
 8002916:	9305      	str	r3, [sp, #20]
 8002918:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80029d8 <_svfiprintf_r+0x1f0>
 800291c:	2203      	movs	r2, #3
 800291e:	4650      	mov	r0, sl
 8002920:	7821      	ldrb	r1, [r4, #0]
 8002922:	f000 f9f7 	bl	8002d14 <memchr>
 8002926:	b140      	cbz	r0, 800293a <_svfiprintf_r+0x152>
 8002928:	2340      	movs	r3, #64	; 0x40
 800292a:	eba0 000a 	sub.w	r0, r0, sl
 800292e:	fa03 f000 	lsl.w	r0, r3, r0
 8002932:	9b04      	ldr	r3, [sp, #16]
 8002934:	3401      	adds	r4, #1
 8002936:	4303      	orrs	r3, r0
 8002938:	9304      	str	r3, [sp, #16]
 800293a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800293e:	2206      	movs	r2, #6
 8002940:	4826      	ldr	r0, [pc, #152]	; (80029dc <_svfiprintf_r+0x1f4>)
 8002942:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002946:	f000 f9e5 	bl	8002d14 <memchr>
 800294a:	2800      	cmp	r0, #0
 800294c:	d038      	beq.n	80029c0 <_svfiprintf_r+0x1d8>
 800294e:	4b24      	ldr	r3, [pc, #144]	; (80029e0 <_svfiprintf_r+0x1f8>)
 8002950:	bb1b      	cbnz	r3, 800299a <_svfiprintf_r+0x1b2>
 8002952:	9b03      	ldr	r3, [sp, #12]
 8002954:	3307      	adds	r3, #7
 8002956:	f023 0307 	bic.w	r3, r3, #7
 800295a:	3308      	adds	r3, #8
 800295c:	9303      	str	r3, [sp, #12]
 800295e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002960:	4433      	add	r3, r6
 8002962:	9309      	str	r3, [sp, #36]	; 0x24
 8002964:	e767      	b.n	8002836 <_svfiprintf_r+0x4e>
 8002966:	460c      	mov	r4, r1
 8002968:	2001      	movs	r0, #1
 800296a:	fb0c 3202 	mla	r2, ip, r2, r3
 800296e:	e7a5      	b.n	80028bc <_svfiprintf_r+0xd4>
 8002970:	2300      	movs	r3, #0
 8002972:	f04f 0c0a 	mov.w	ip, #10
 8002976:	4619      	mov	r1, r3
 8002978:	3401      	adds	r4, #1
 800297a:	9305      	str	r3, [sp, #20]
 800297c:	4620      	mov	r0, r4
 800297e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002982:	3a30      	subs	r2, #48	; 0x30
 8002984:	2a09      	cmp	r2, #9
 8002986:	d903      	bls.n	8002990 <_svfiprintf_r+0x1a8>
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0c5      	beq.n	8002918 <_svfiprintf_r+0x130>
 800298c:	9105      	str	r1, [sp, #20]
 800298e:	e7c3      	b.n	8002918 <_svfiprintf_r+0x130>
 8002990:	4604      	mov	r4, r0
 8002992:	2301      	movs	r3, #1
 8002994:	fb0c 2101 	mla	r1, ip, r1, r2
 8002998:	e7f0      	b.n	800297c <_svfiprintf_r+0x194>
 800299a:	ab03      	add	r3, sp, #12
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	462a      	mov	r2, r5
 80029a0:	4638      	mov	r0, r7
 80029a2:	4b10      	ldr	r3, [pc, #64]	; (80029e4 <_svfiprintf_r+0x1fc>)
 80029a4:	a904      	add	r1, sp, #16
 80029a6:	f3af 8000 	nop.w
 80029aa:	1c42      	adds	r2, r0, #1
 80029ac:	4606      	mov	r6, r0
 80029ae:	d1d6      	bne.n	800295e <_svfiprintf_r+0x176>
 80029b0:	89ab      	ldrh	r3, [r5, #12]
 80029b2:	065b      	lsls	r3, r3, #25
 80029b4:	f53f af2c 	bmi.w	8002810 <_svfiprintf_r+0x28>
 80029b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80029ba:	b01d      	add	sp, #116	; 0x74
 80029bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029c0:	ab03      	add	r3, sp, #12
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	462a      	mov	r2, r5
 80029c6:	4638      	mov	r0, r7
 80029c8:	4b06      	ldr	r3, [pc, #24]	; (80029e4 <_svfiprintf_r+0x1fc>)
 80029ca:	a904      	add	r1, sp, #16
 80029cc:	f000 f87c 	bl	8002ac8 <_printf_i>
 80029d0:	e7eb      	b.n	80029aa <_svfiprintf_r+0x1c2>
 80029d2:	bf00      	nop
 80029d4:	08004378 	.word	0x08004378
 80029d8:	0800437e 	.word	0x0800437e
 80029dc:	08004382 	.word	0x08004382
 80029e0:	00000000 	.word	0x00000000
 80029e4:	08002731 	.word	0x08002731

080029e8 <_printf_common>:
 80029e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029ec:	4616      	mov	r6, r2
 80029ee:	4699      	mov	r9, r3
 80029f0:	688a      	ldr	r2, [r1, #8]
 80029f2:	690b      	ldr	r3, [r1, #16]
 80029f4:	4607      	mov	r7, r0
 80029f6:	4293      	cmp	r3, r2
 80029f8:	bfb8      	it	lt
 80029fa:	4613      	movlt	r3, r2
 80029fc:	6033      	str	r3, [r6, #0]
 80029fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a02:	460c      	mov	r4, r1
 8002a04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a08:	b10a      	cbz	r2, 8002a0e <_printf_common+0x26>
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	6033      	str	r3, [r6, #0]
 8002a0e:	6823      	ldr	r3, [r4, #0]
 8002a10:	0699      	lsls	r1, r3, #26
 8002a12:	bf42      	ittt	mi
 8002a14:	6833      	ldrmi	r3, [r6, #0]
 8002a16:	3302      	addmi	r3, #2
 8002a18:	6033      	strmi	r3, [r6, #0]
 8002a1a:	6825      	ldr	r5, [r4, #0]
 8002a1c:	f015 0506 	ands.w	r5, r5, #6
 8002a20:	d106      	bne.n	8002a30 <_printf_common+0x48>
 8002a22:	f104 0a19 	add.w	sl, r4, #25
 8002a26:	68e3      	ldr	r3, [r4, #12]
 8002a28:	6832      	ldr	r2, [r6, #0]
 8002a2a:	1a9b      	subs	r3, r3, r2
 8002a2c:	42ab      	cmp	r3, r5
 8002a2e:	dc28      	bgt.n	8002a82 <_printf_common+0x9a>
 8002a30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002a34:	1e13      	subs	r3, r2, #0
 8002a36:	6822      	ldr	r2, [r4, #0]
 8002a38:	bf18      	it	ne
 8002a3a:	2301      	movne	r3, #1
 8002a3c:	0692      	lsls	r2, r2, #26
 8002a3e:	d42d      	bmi.n	8002a9c <_printf_common+0xb4>
 8002a40:	4649      	mov	r1, r9
 8002a42:	4638      	mov	r0, r7
 8002a44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a48:	47c0      	blx	r8
 8002a4a:	3001      	adds	r0, #1
 8002a4c:	d020      	beq.n	8002a90 <_printf_common+0xa8>
 8002a4e:	6823      	ldr	r3, [r4, #0]
 8002a50:	68e5      	ldr	r5, [r4, #12]
 8002a52:	f003 0306 	and.w	r3, r3, #6
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	bf18      	it	ne
 8002a5a:	2500      	movne	r5, #0
 8002a5c:	6832      	ldr	r2, [r6, #0]
 8002a5e:	f04f 0600 	mov.w	r6, #0
 8002a62:	68a3      	ldr	r3, [r4, #8]
 8002a64:	bf08      	it	eq
 8002a66:	1aad      	subeq	r5, r5, r2
 8002a68:	6922      	ldr	r2, [r4, #16]
 8002a6a:	bf08      	it	eq
 8002a6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a70:	4293      	cmp	r3, r2
 8002a72:	bfc4      	itt	gt
 8002a74:	1a9b      	subgt	r3, r3, r2
 8002a76:	18ed      	addgt	r5, r5, r3
 8002a78:	341a      	adds	r4, #26
 8002a7a:	42b5      	cmp	r5, r6
 8002a7c:	d11a      	bne.n	8002ab4 <_printf_common+0xcc>
 8002a7e:	2000      	movs	r0, #0
 8002a80:	e008      	b.n	8002a94 <_printf_common+0xac>
 8002a82:	2301      	movs	r3, #1
 8002a84:	4652      	mov	r2, sl
 8002a86:	4649      	mov	r1, r9
 8002a88:	4638      	mov	r0, r7
 8002a8a:	47c0      	blx	r8
 8002a8c:	3001      	adds	r0, #1
 8002a8e:	d103      	bne.n	8002a98 <_printf_common+0xb0>
 8002a90:	f04f 30ff 	mov.w	r0, #4294967295
 8002a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a98:	3501      	adds	r5, #1
 8002a9a:	e7c4      	b.n	8002a26 <_printf_common+0x3e>
 8002a9c:	2030      	movs	r0, #48	; 0x30
 8002a9e:	18e1      	adds	r1, r4, r3
 8002aa0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002aa4:	1c5a      	adds	r2, r3, #1
 8002aa6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002aaa:	4422      	add	r2, r4
 8002aac:	3302      	adds	r3, #2
 8002aae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002ab2:	e7c5      	b.n	8002a40 <_printf_common+0x58>
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	4622      	mov	r2, r4
 8002ab8:	4649      	mov	r1, r9
 8002aba:	4638      	mov	r0, r7
 8002abc:	47c0      	blx	r8
 8002abe:	3001      	adds	r0, #1
 8002ac0:	d0e6      	beq.n	8002a90 <_printf_common+0xa8>
 8002ac2:	3601      	adds	r6, #1
 8002ac4:	e7d9      	b.n	8002a7a <_printf_common+0x92>
	...

08002ac8 <_printf_i>:
 8002ac8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002acc:	7e0f      	ldrb	r7, [r1, #24]
 8002ace:	4691      	mov	r9, r2
 8002ad0:	2f78      	cmp	r7, #120	; 0x78
 8002ad2:	4680      	mov	r8, r0
 8002ad4:	460c      	mov	r4, r1
 8002ad6:	469a      	mov	sl, r3
 8002ad8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002ada:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002ade:	d807      	bhi.n	8002af0 <_printf_i+0x28>
 8002ae0:	2f62      	cmp	r7, #98	; 0x62
 8002ae2:	d80a      	bhi.n	8002afa <_printf_i+0x32>
 8002ae4:	2f00      	cmp	r7, #0
 8002ae6:	f000 80d9 	beq.w	8002c9c <_printf_i+0x1d4>
 8002aea:	2f58      	cmp	r7, #88	; 0x58
 8002aec:	f000 80a4 	beq.w	8002c38 <_printf_i+0x170>
 8002af0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002af4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002af8:	e03a      	b.n	8002b70 <_printf_i+0xa8>
 8002afa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002afe:	2b15      	cmp	r3, #21
 8002b00:	d8f6      	bhi.n	8002af0 <_printf_i+0x28>
 8002b02:	a101      	add	r1, pc, #4	; (adr r1, 8002b08 <_printf_i+0x40>)
 8002b04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002b08:	08002b61 	.word	0x08002b61
 8002b0c:	08002b75 	.word	0x08002b75
 8002b10:	08002af1 	.word	0x08002af1
 8002b14:	08002af1 	.word	0x08002af1
 8002b18:	08002af1 	.word	0x08002af1
 8002b1c:	08002af1 	.word	0x08002af1
 8002b20:	08002b75 	.word	0x08002b75
 8002b24:	08002af1 	.word	0x08002af1
 8002b28:	08002af1 	.word	0x08002af1
 8002b2c:	08002af1 	.word	0x08002af1
 8002b30:	08002af1 	.word	0x08002af1
 8002b34:	08002c83 	.word	0x08002c83
 8002b38:	08002ba5 	.word	0x08002ba5
 8002b3c:	08002c65 	.word	0x08002c65
 8002b40:	08002af1 	.word	0x08002af1
 8002b44:	08002af1 	.word	0x08002af1
 8002b48:	08002ca5 	.word	0x08002ca5
 8002b4c:	08002af1 	.word	0x08002af1
 8002b50:	08002ba5 	.word	0x08002ba5
 8002b54:	08002af1 	.word	0x08002af1
 8002b58:	08002af1 	.word	0x08002af1
 8002b5c:	08002c6d 	.word	0x08002c6d
 8002b60:	682b      	ldr	r3, [r5, #0]
 8002b62:	1d1a      	adds	r2, r3, #4
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	602a      	str	r2, [r5, #0]
 8002b68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b70:	2301      	movs	r3, #1
 8002b72:	e0a4      	b.n	8002cbe <_printf_i+0x1f6>
 8002b74:	6820      	ldr	r0, [r4, #0]
 8002b76:	6829      	ldr	r1, [r5, #0]
 8002b78:	0606      	lsls	r6, r0, #24
 8002b7a:	f101 0304 	add.w	r3, r1, #4
 8002b7e:	d50a      	bpl.n	8002b96 <_printf_i+0xce>
 8002b80:	680e      	ldr	r6, [r1, #0]
 8002b82:	602b      	str	r3, [r5, #0]
 8002b84:	2e00      	cmp	r6, #0
 8002b86:	da03      	bge.n	8002b90 <_printf_i+0xc8>
 8002b88:	232d      	movs	r3, #45	; 0x2d
 8002b8a:	4276      	negs	r6, r6
 8002b8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b90:	230a      	movs	r3, #10
 8002b92:	485e      	ldr	r0, [pc, #376]	; (8002d0c <_printf_i+0x244>)
 8002b94:	e019      	b.n	8002bca <_printf_i+0x102>
 8002b96:	680e      	ldr	r6, [r1, #0]
 8002b98:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002b9c:	602b      	str	r3, [r5, #0]
 8002b9e:	bf18      	it	ne
 8002ba0:	b236      	sxthne	r6, r6
 8002ba2:	e7ef      	b.n	8002b84 <_printf_i+0xbc>
 8002ba4:	682b      	ldr	r3, [r5, #0]
 8002ba6:	6820      	ldr	r0, [r4, #0]
 8002ba8:	1d19      	adds	r1, r3, #4
 8002baa:	6029      	str	r1, [r5, #0]
 8002bac:	0601      	lsls	r1, r0, #24
 8002bae:	d501      	bpl.n	8002bb4 <_printf_i+0xec>
 8002bb0:	681e      	ldr	r6, [r3, #0]
 8002bb2:	e002      	b.n	8002bba <_printf_i+0xf2>
 8002bb4:	0646      	lsls	r6, r0, #25
 8002bb6:	d5fb      	bpl.n	8002bb0 <_printf_i+0xe8>
 8002bb8:	881e      	ldrh	r6, [r3, #0]
 8002bba:	2f6f      	cmp	r7, #111	; 0x6f
 8002bbc:	bf0c      	ite	eq
 8002bbe:	2308      	moveq	r3, #8
 8002bc0:	230a      	movne	r3, #10
 8002bc2:	4852      	ldr	r0, [pc, #328]	; (8002d0c <_printf_i+0x244>)
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002bca:	6865      	ldr	r5, [r4, #4]
 8002bcc:	2d00      	cmp	r5, #0
 8002bce:	bfa8      	it	ge
 8002bd0:	6821      	ldrge	r1, [r4, #0]
 8002bd2:	60a5      	str	r5, [r4, #8]
 8002bd4:	bfa4      	itt	ge
 8002bd6:	f021 0104 	bicge.w	r1, r1, #4
 8002bda:	6021      	strge	r1, [r4, #0]
 8002bdc:	b90e      	cbnz	r6, 8002be2 <_printf_i+0x11a>
 8002bde:	2d00      	cmp	r5, #0
 8002be0:	d04d      	beq.n	8002c7e <_printf_i+0x1b6>
 8002be2:	4615      	mov	r5, r2
 8002be4:	fbb6 f1f3 	udiv	r1, r6, r3
 8002be8:	fb03 6711 	mls	r7, r3, r1, r6
 8002bec:	5dc7      	ldrb	r7, [r0, r7]
 8002bee:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002bf2:	4637      	mov	r7, r6
 8002bf4:	42bb      	cmp	r3, r7
 8002bf6:	460e      	mov	r6, r1
 8002bf8:	d9f4      	bls.n	8002be4 <_printf_i+0x11c>
 8002bfa:	2b08      	cmp	r3, #8
 8002bfc:	d10b      	bne.n	8002c16 <_printf_i+0x14e>
 8002bfe:	6823      	ldr	r3, [r4, #0]
 8002c00:	07de      	lsls	r6, r3, #31
 8002c02:	d508      	bpl.n	8002c16 <_printf_i+0x14e>
 8002c04:	6923      	ldr	r3, [r4, #16]
 8002c06:	6861      	ldr	r1, [r4, #4]
 8002c08:	4299      	cmp	r1, r3
 8002c0a:	bfde      	ittt	le
 8002c0c:	2330      	movle	r3, #48	; 0x30
 8002c0e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c12:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002c16:	1b52      	subs	r2, r2, r5
 8002c18:	6122      	str	r2, [r4, #16]
 8002c1a:	464b      	mov	r3, r9
 8002c1c:	4621      	mov	r1, r4
 8002c1e:	4640      	mov	r0, r8
 8002c20:	f8cd a000 	str.w	sl, [sp]
 8002c24:	aa03      	add	r2, sp, #12
 8002c26:	f7ff fedf 	bl	80029e8 <_printf_common>
 8002c2a:	3001      	adds	r0, #1
 8002c2c:	d14c      	bne.n	8002cc8 <_printf_i+0x200>
 8002c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8002c32:	b004      	add	sp, #16
 8002c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c38:	4834      	ldr	r0, [pc, #208]	; (8002d0c <_printf_i+0x244>)
 8002c3a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002c3e:	6829      	ldr	r1, [r5, #0]
 8002c40:	6823      	ldr	r3, [r4, #0]
 8002c42:	f851 6b04 	ldr.w	r6, [r1], #4
 8002c46:	6029      	str	r1, [r5, #0]
 8002c48:	061d      	lsls	r5, r3, #24
 8002c4a:	d514      	bpl.n	8002c76 <_printf_i+0x1ae>
 8002c4c:	07df      	lsls	r7, r3, #31
 8002c4e:	bf44      	itt	mi
 8002c50:	f043 0320 	orrmi.w	r3, r3, #32
 8002c54:	6023      	strmi	r3, [r4, #0]
 8002c56:	b91e      	cbnz	r6, 8002c60 <_printf_i+0x198>
 8002c58:	6823      	ldr	r3, [r4, #0]
 8002c5a:	f023 0320 	bic.w	r3, r3, #32
 8002c5e:	6023      	str	r3, [r4, #0]
 8002c60:	2310      	movs	r3, #16
 8002c62:	e7af      	b.n	8002bc4 <_printf_i+0xfc>
 8002c64:	6823      	ldr	r3, [r4, #0]
 8002c66:	f043 0320 	orr.w	r3, r3, #32
 8002c6a:	6023      	str	r3, [r4, #0]
 8002c6c:	2378      	movs	r3, #120	; 0x78
 8002c6e:	4828      	ldr	r0, [pc, #160]	; (8002d10 <_printf_i+0x248>)
 8002c70:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002c74:	e7e3      	b.n	8002c3e <_printf_i+0x176>
 8002c76:	0659      	lsls	r1, r3, #25
 8002c78:	bf48      	it	mi
 8002c7a:	b2b6      	uxthmi	r6, r6
 8002c7c:	e7e6      	b.n	8002c4c <_printf_i+0x184>
 8002c7e:	4615      	mov	r5, r2
 8002c80:	e7bb      	b.n	8002bfa <_printf_i+0x132>
 8002c82:	682b      	ldr	r3, [r5, #0]
 8002c84:	6826      	ldr	r6, [r4, #0]
 8002c86:	1d18      	adds	r0, r3, #4
 8002c88:	6961      	ldr	r1, [r4, #20]
 8002c8a:	6028      	str	r0, [r5, #0]
 8002c8c:	0635      	lsls	r5, r6, #24
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	d501      	bpl.n	8002c96 <_printf_i+0x1ce>
 8002c92:	6019      	str	r1, [r3, #0]
 8002c94:	e002      	b.n	8002c9c <_printf_i+0x1d4>
 8002c96:	0670      	lsls	r0, r6, #25
 8002c98:	d5fb      	bpl.n	8002c92 <_printf_i+0x1ca>
 8002c9a:	8019      	strh	r1, [r3, #0]
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	4615      	mov	r5, r2
 8002ca0:	6123      	str	r3, [r4, #16]
 8002ca2:	e7ba      	b.n	8002c1a <_printf_i+0x152>
 8002ca4:	682b      	ldr	r3, [r5, #0]
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	1d1a      	adds	r2, r3, #4
 8002caa:	602a      	str	r2, [r5, #0]
 8002cac:	681d      	ldr	r5, [r3, #0]
 8002cae:	6862      	ldr	r2, [r4, #4]
 8002cb0:	4628      	mov	r0, r5
 8002cb2:	f000 f82f 	bl	8002d14 <memchr>
 8002cb6:	b108      	cbz	r0, 8002cbc <_printf_i+0x1f4>
 8002cb8:	1b40      	subs	r0, r0, r5
 8002cba:	6060      	str	r0, [r4, #4]
 8002cbc:	6863      	ldr	r3, [r4, #4]
 8002cbe:	6123      	str	r3, [r4, #16]
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002cc6:	e7a8      	b.n	8002c1a <_printf_i+0x152>
 8002cc8:	462a      	mov	r2, r5
 8002cca:	4649      	mov	r1, r9
 8002ccc:	4640      	mov	r0, r8
 8002cce:	6923      	ldr	r3, [r4, #16]
 8002cd0:	47d0      	blx	sl
 8002cd2:	3001      	adds	r0, #1
 8002cd4:	d0ab      	beq.n	8002c2e <_printf_i+0x166>
 8002cd6:	6823      	ldr	r3, [r4, #0]
 8002cd8:	079b      	lsls	r3, r3, #30
 8002cda:	d413      	bmi.n	8002d04 <_printf_i+0x23c>
 8002cdc:	68e0      	ldr	r0, [r4, #12]
 8002cde:	9b03      	ldr	r3, [sp, #12]
 8002ce0:	4298      	cmp	r0, r3
 8002ce2:	bfb8      	it	lt
 8002ce4:	4618      	movlt	r0, r3
 8002ce6:	e7a4      	b.n	8002c32 <_printf_i+0x16a>
 8002ce8:	2301      	movs	r3, #1
 8002cea:	4632      	mov	r2, r6
 8002cec:	4649      	mov	r1, r9
 8002cee:	4640      	mov	r0, r8
 8002cf0:	47d0      	blx	sl
 8002cf2:	3001      	adds	r0, #1
 8002cf4:	d09b      	beq.n	8002c2e <_printf_i+0x166>
 8002cf6:	3501      	adds	r5, #1
 8002cf8:	68e3      	ldr	r3, [r4, #12]
 8002cfa:	9903      	ldr	r1, [sp, #12]
 8002cfc:	1a5b      	subs	r3, r3, r1
 8002cfe:	42ab      	cmp	r3, r5
 8002d00:	dcf2      	bgt.n	8002ce8 <_printf_i+0x220>
 8002d02:	e7eb      	b.n	8002cdc <_printf_i+0x214>
 8002d04:	2500      	movs	r5, #0
 8002d06:	f104 0619 	add.w	r6, r4, #25
 8002d0a:	e7f5      	b.n	8002cf8 <_printf_i+0x230>
 8002d0c:	08004389 	.word	0x08004389
 8002d10:	0800439a 	.word	0x0800439a

08002d14 <memchr>:
 8002d14:	4603      	mov	r3, r0
 8002d16:	b510      	push	{r4, lr}
 8002d18:	b2c9      	uxtb	r1, r1
 8002d1a:	4402      	add	r2, r0
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	4618      	mov	r0, r3
 8002d20:	d101      	bne.n	8002d26 <memchr+0x12>
 8002d22:	2000      	movs	r0, #0
 8002d24:	e003      	b.n	8002d2e <memchr+0x1a>
 8002d26:	7804      	ldrb	r4, [r0, #0]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	428c      	cmp	r4, r1
 8002d2c:	d1f6      	bne.n	8002d1c <memchr+0x8>
 8002d2e:	bd10      	pop	{r4, pc}

08002d30 <memcpy>:
 8002d30:	440a      	add	r2, r1
 8002d32:	4291      	cmp	r1, r2
 8002d34:	f100 33ff 	add.w	r3, r0, #4294967295
 8002d38:	d100      	bne.n	8002d3c <memcpy+0xc>
 8002d3a:	4770      	bx	lr
 8002d3c:	b510      	push	{r4, lr}
 8002d3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d42:	4291      	cmp	r1, r2
 8002d44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d48:	d1f9      	bne.n	8002d3e <memcpy+0xe>
 8002d4a:	bd10      	pop	{r4, pc}

08002d4c <memmove>:
 8002d4c:	4288      	cmp	r0, r1
 8002d4e:	b510      	push	{r4, lr}
 8002d50:	eb01 0402 	add.w	r4, r1, r2
 8002d54:	d902      	bls.n	8002d5c <memmove+0x10>
 8002d56:	4284      	cmp	r4, r0
 8002d58:	4623      	mov	r3, r4
 8002d5a:	d807      	bhi.n	8002d6c <memmove+0x20>
 8002d5c:	1e43      	subs	r3, r0, #1
 8002d5e:	42a1      	cmp	r1, r4
 8002d60:	d008      	beq.n	8002d74 <memmove+0x28>
 8002d62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002d66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002d6a:	e7f8      	b.n	8002d5e <memmove+0x12>
 8002d6c:	4601      	mov	r1, r0
 8002d6e:	4402      	add	r2, r0
 8002d70:	428a      	cmp	r2, r1
 8002d72:	d100      	bne.n	8002d76 <memmove+0x2a>
 8002d74:	bd10      	pop	{r4, pc}
 8002d76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002d7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002d7e:	e7f7      	b.n	8002d70 <memmove+0x24>

08002d80 <_free_r>:
 8002d80:	b538      	push	{r3, r4, r5, lr}
 8002d82:	4605      	mov	r5, r0
 8002d84:	2900      	cmp	r1, #0
 8002d86:	d040      	beq.n	8002e0a <_free_r+0x8a>
 8002d88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d8c:	1f0c      	subs	r4, r1, #4
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	bfb8      	it	lt
 8002d92:	18e4      	addlt	r4, r4, r3
 8002d94:	f000 f910 	bl	8002fb8 <__malloc_lock>
 8002d98:	4a1c      	ldr	r2, [pc, #112]	; (8002e0c <_free_r+0x8c>)
 8002d9a:	6813      	ldr	r3, [r2, #0]
 8002d9c:	b933      	cbnz	r3, 8002dac <_free_r+0x2c>
 8002d9e:	6063      	str	r3, [r4, #4]
 8002da0:	6014      	str	r4, [r2, #0]
 8002da2:	4628      	mov	r0, r5
 8002da4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002da8:	f000 b90c 	b.w	8002fc4 <__malloc_unlock>
 8002dac:	42a3      	cmp	r3, r4
 8002dae:	d908      	bls.n	8002dc2 <_free_r+0x42>
 8002db0:	6820      	ldr	r0, [r4, #0]
 8002db2:	1821      	adds	r1, r4, r0
 8002db4:	428b      	cmp	r3, r1
 8002db6:	bf01      	itttt	eq
 8002db8:	6819      	ldreq	r1, [r3, #0]
 8002dba:	685b      	ldreq	r3, [r3, #4]
 8002dbc:	1809      	addeq	r1, r1, r0
 8002dbe:	6021      	streq	r1, [r4, #0]
 8002dc0:	e7ed      	b.n	8002d9e <_free_r+0x1e>
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	b10b      	cbz	r3, 8002dcc <_free_r+0x4c>
 8002dc8:	42a3      	cmp	r3, r4
 8002dca:	d9fa      	bls.n	8002dc2 <_free_r+0x42>
 8002dcc:	6811      	ldr	r1, [r2, #0]
 8002dce:	1850      	adds	r0, r2, r1
 8002dd0:	42a0      	cmp	r0, r4
 8002dd2:	d10b      	bne.n	8002dec <_free_r+0x6c>
 8002dd4:	6820      	ldr	r0, [r4, #0]
 8002dd6:	4401      	add	r1, r0
 8002dd8:	1850      	adds	r0, r2, r1
 8002dda:	4283      	cmp	r3, r0
 8002ddc:	6011      	str	r1, [r2, #0]
 8002dde:	d1e0      	bne.n	8002da2 <_free_r+0x22>
 8002de0:	6818      	ldr	r0, [r3, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	4401      	add	r1, r0
 8002de6:	6011      	str	r1, [r2, #0]
 8002de8:	6053      	str	r3, [r2, #4]
 8002dea:	e7da      	b.n	8002da2 <_free_r+0x22>
 8002dec:	d902      	bls.n	8002df4 <_free_r+0x74>
 8002dee:	230c      	movs	r3, #12
 8002df0:	602b      	str	r3, [r5, #0]
 8002df2:	e7d6      	b.n	8002da2 <_free_r+0x22>
 8002df4:	6820      	ldr	r0, [r4, #0]
 8002df6:	1821      	adds	r1, r4, r0
 8002df8:	428b      	cmp	r3, r1
 8002dfa:	bf01      	itttt	eq
 8002dfc:	6819      	ldreq	r1, [r3, #0]
 8002dfe:	685b      	ldreq	r3, [r3, #4]
 8002e00:	1809      	addeq	r1, r1, r0
 8002e02:	6021      	streq	r1, [r4, #0]
 8002e04:	6063      	str	r3, [r4, #4]
 8002e06:	6054      	str	r4, [r2, #4]
 8002e08:	e7cb      	b.n	8002da2 <_free_r+0x22>
 8002e0a:	bd38      	pop	{r3, r4, r5, pc}
 8002e0c:	20000518 	.word	0x20000518

08002e10 <sbrk_aligned>:
 8002e10:	b570      	push	{r4, r5, r6, lr}
 8002e12:	4e0e      	ldr	r6, [pc, #56]	; (8002e4c <sbrk_aligned+0x3c>)
 8002e14:	460c      	mov	r4, r1
 8002e16:	6831      	ldr	r1, [r6, #0]
 8002e18:	4605      	mov	r5, r0
 8002e1a:	b911      	cbnz	r1, 8002e22 <sbrk_aligned+0x12>
 8002e1c:	f000 f8bc 	bl	8002f98 <_sbrk_r>
 8002e20:	6030      	str	r0, [r6, #0]
 8002e22:	4621      	mov	r1, r4
 8002e24:	4628      	mov	r0, r5
 8002e26:	f000 f8b7 	bl	8002f98 <_sbrk_r>
 8002e2a:	1c43      	adds	r3, r0, #1
 8002e2c:	d00a      	beq.n	8002e44 <sbrk_aligned+0x34>
 8002e2e:	1cc4      	adds	r4, r0, #3
 8002e30:	f024 0403 	bic.w	r4, r4, #3
 8002e34:	42a0      	cmp	r0, r4
 8002e36:	d007      	beq.n	8002e48 <sbrk_aligned+0x38>
 8002e38:	1a21      	subs	r1, r4, r0
 8002e3a:	4628      	mov	r0, r5
 8002e3c:	f000 f8ac 	bl	8002f98 <_sbrk_r>
 8002e40:	3001      	adds	r0, #1
 8002e42:	d101      	bne.n	8002e48 <sbrk_aligned+0x38>
 8002e44:	f04f 34ff 	mov.w	r4, #4294967295
 8002e48:	4620      	mov	r0, r4
 8002e4a:	bd70      	pop	{r4, r5, r6, pc}
 8002e4c:	2000051c 	.word	0x2000051c

08002e50 <_malloc_r>:
 8002e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e54:	1ccd      	adds	r5, r1, #3
 8002e56:	f025 0503 	bic.w	r5, r5, #3
 8002e5a:	3508      	adds	r5, #8
 8002e5c:	2d0c      	cmp	r5, #12
 8002e5e:	bf38      	it	cc
 8002e60:	250c      	movcc	r5, #12
 8002e62:	2d00      	cmp	r5, #0
 8002e64:	4607      	mov	r7, r0
 8002e66:	db01      	blt.n	8002e6c <_malloc_r+0x1c>
 8002e68:	42a9      	cmp	r1, r5
 8002e6a:	d905      	bls.n	8002e78 <_malloc_r+0x28>
 8002e6c:	230c      	movs	r3, #12
 8002e6e:	2600      	movs	r6, #0
 8002e70:	603b      	str	r3, [r7, #0]
 8002e72:	4630      	mov	r0, r6
 8002e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e78:	4e2e      	ldr	r6, [pc, #184]	; (8002f34 <_malloc_r+0xe4>)
 8002e7a:	f000 f89d 	bl	8002fb8 <__malloc_lock>
 8002e7e:	6833      	ldr	r3, [r6, #0]
 8002e80:	461c      	mov	r4, r3
 8002e82:	bb34      	cbnz	r4, 8002ed2 <_malloc_r+0x82>
 8002e84:	4629      	mov	r1, r5
 8002e86:	4638      	mov	r0, r7
 8002e88:	f7ff ffc2 	bl	8002e10 <sbrk_aligned>
 8002e8c:	1c43      	adds	r3, r0, #1
 8002e8e:	4604      	mov	r4, r0
 8002e90:	d14d      	bne.n	8002f2e <_malloc_r+0xde>
 8002e92:	6834      	ldr	r4, [r6, #0]
 8002e94:	4626      	mov	r6, r4
 8002e96:	2e00      	cmp	r6, #0
 8002e98:	d140      	bne.n	8002f1c <_malloc_r+0xcc>
 8002e9a:	6823      	ldr	r3, [r4, #0]
 8002e9c:	4631      	mov	r1, r6
 8002e9e:	4638      	mov	r0, r7
 8002ea0:	eb04 0803 	add.w	r8, r4, r3
 8002ea4:	f000 f878 	bl	8002f98 <_sbrk_r>
 8002ea8:	4580      	cmp	r8, r0
 8002eaa:	d13a      	bne.n	8002f22 <_malloc_r+0xd2>
 8002eac:	6821      	ldr	r1, [r4, #0]
 8002eae:	3503      	adds	r5, #3
 8002eb0:	1a6d      	subs	r5, r5, r1
 8002eb2:	f025 0503 	bic.w	r5, r5, #3
 8002eb6:	3508      	adds	r5, #8
 8002eb8:	2d0c      	cmp	r5, #12
 8002eba:	bf38      	it	cc
 8002ebc:	250c      	movcc	r5, #12
 8002ebe:	4638      	mov	r0, r7
 8002ec0:	4629      	mov	r1, r5
 8002ec2:	f7ff ffa5 	bl	8002e10 <sbrk_aligned>
 8002ec6:	3001      	adds	r0, #1
 8002ec8:	d02b      	beq.n	8002f22 <_malloc_r+0xd2>
 8002eca:	6823      	ldr	r3, [r4, #0]
 8002ecc:	442b      	add	r3, r5
 8002ece:	6023      	str	r3, [r4, #0]
 8002ed0:	e00e      	b.n	8002ef0 <_malloc_r+0xa0>
 8002ed2:	6822      	ldr	r2, [r4, #0]
 8002ed4:	1b52      	subs	r2, r2, r5
 8002ed6:	d41e      	bmi.n	8002f16 <_malloc_r+0xc6>
 8002ed8:	2a0b      	cmp	r2, #11
 8002eda:	d916      	bls.n	8002f0a <_malloc_r+0xba>
 8002edc:	1961      	adds	r1, r4, r5
 8002ede:	42a3      	cmp	r3, r4
 8002ee0:	6025      	str	r5, [r4, #0]
 8002ee2:	bf18      	it	ne
 8002ee4:	6059      	strne	r1, [r3, #4]
 8002ee6:	6863      	ldr	r3, [r4, #4]
 8002ee8:	bf08      	it	eq
 8002eea:	6031      	streq	r1, [r6, #0]
 8002eec:	5162      	str	r2, [r4, r5]
 8002eee:	604b      	str	r3, [r1, #4]
 8002ef0:	4638      	mov	r0, r7
 8002ef2:	f104 060b 	add.w	r6, r4, #11
 8002ef6:	f000 f865 	bl	8002fc4 <__malloc_unlock>
 8002efa:	f026 0607 	bic.w	r6, r6, #7
 8002efe:	1d23      	adds	r3, r4, #4
 8002f00:	1af2      	subs	r2, r6, r3
 8002f02:	d0b6      	beq.n	8002e72 <_malloc_r+0x22>
 8002f04:	1b9b      	subs	r3, r3, r6
 8002f06:	50a3      	str	r3, [r4, r2]
 8002f08:	e7b3      	b.n	8002e72 <_malloc_r+0x22>
 8002f0a:	6862      	ldr	r2, [r4, #4]
 8002f0c:	42a3      	cmp	r3, r4
 8002f0e:	bf0c      	ite	eq
 8002f10:	6032      	streq	r2, [r6, #0]
 8002f12:	605a      	strne	r2, [r3, #4]
 8002f14:	e7ec      	b.n	8002ef0 <_malloc_r+0xa0>
 8002f16:	4623      	mov	r3, r4
 8002f18:	6864      	ldr	r4, [r4, #4]
 8002f1a:	e7b2      	b.n	8002e82 <_malloc_r+0x32>
 8002f1c:	4634      	mov	r4, r6
 8002f1e:	6876      	ldr	r6, [r6, #4]
 8002f20:	e7b9      	b.n	8002e96 <_malloc_r+0x46>
 8002f22:	230c      	movs	r3, #12
 8002f24:	4638      	mov	r0, r7
 8002f26:	603b      	str	r3, [r7, #0]
 8002f28:	f000 f84c 	bl	8002fc4 <__malloc_unlock>
 8002f2c:	e7a1      	b.n	8002e72 <_malloc_r+0x22>
 8002f2e:	6025      	str	r5, [r4, #0]
 8002f30:	e7de      	b.n	8002ef0 <_malloc_r+0xa0>
 8002f32:	bf00      	nop
 8002f34:	20000518 	.word	0x20000518

08002f38 <_realloc_r>:
 8002f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f3c:	4680      	mov	r8, r0
 8002f3e:	4614      	mov	r4, r2
 8002f40:	460e      	mov	r6, r1
 8002f42:	b921      	cbnz	r1, 8002f4e <_realloc_r+0x16>
 8002f44:	4611      	mov	r1, r2
 8002f46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f4a:	f7ff bf81 	b.w	8002e50 <_malloc_r>
 8002f4e:	b92a      	cbnz	r2, 8002f5c <_realloc_r+0x24>
 8002f50:	f7ff ff16 	bl	8002d80 <_free_r>
 8002f54:	4625      	mov	r5, r4
 8002f56:	4628      	mov	r0, r5
 8002f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f5c:	f000 f838 	bl	8002fd0 <_malloc_usable_size_r>
 8002f60:	4284      	cmp	r4, r0
 8002f62:	4607      	mov	r7, r0
 8002f64:	d802      	bhi.n	8002f6c <_realloc_r+0x34>
 8002f66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002f6a:	d812      	bhi.n	8002f92 <_realloc_r+0x5a>
 8002f6c:	4621      	mov	r1, r4
 8002f6e:	4640      	mov	r0, r8
 8002f70:	f7ff ff6e 	bl	8002e50 <_malloc_r>
 8002f74:	4605      	mov	r5, r0
 8002f76:	2800      	cmp	r0, #0
 8002f78:	d0ed      	beq.n	8002f56 <_realloc_r+0x1e>
 8002f7a:	42bc      	cmp	r4, r7
 8002f7c:	4622      	mov	r2, r4
 8002f7e:	4631      	mov	r1, r6
 8002f80:	bf28      	it	cs
 8002f82:	463a      	movcs	r2, r7
 8002f84:	f7ff fed4 	bl	8002d30 <memcpy>
 8002f88:	4631      	mov	r1, r6
 8002f8a:	4640      	mov	r0, r8
 8002f8c:	f7ff fef8 	bl	8002d80 <_free_r>
 8002f90:	e7e1      	b.n	8002f56 <_realloc_r+0x1e>
 8002f92:	4635      	mov	r5, r6
 8002f94:	e7df      	b.n	8002f56 <_realloc_r+0x1e>
	...

08002f98 <_sbrk_r>:
 8002f98:	b538      	push	{r3, r4, r5, lr}
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	4d05      	ldr	r5, [pc, #20]	; (8002fb4 <_sbrk_r+0x1c>)
 8002f9e:	4604      	mov	r4, r0
 8002fa0:	4608      	mov	r0, r1
 8002fa2:	602b      	str	r3, [r5, #0]
 8002fa4:	f7fd fec8 	bl	8000d38 <_sbrk>
 8002fa8:	1c43      	adds	r3, r0, #1
 8002faa:	d102      	bne.n	8002fb2 <_sbrk_r+0x1a>
 8002fac:	682b      	ldr	r3, [r5, #0]
 8002fae:	b103      	cbz	r3, 8002fb2 <_sbrk_r+0x1a>
 8002fb0:	6023      	str	r3, [r4, #0]
 8002fb2:	bd38      	pop	{r3, r4, r5, pc}
 8002fb4:	20000520 	.word	0x20000520

08002fb8 <__malloc_lock>:
 8002fb8:	4801      	ldr	r0, [pc, #4]	; (8002fc0 <__malloc_lock+0x8>)
 8002fba:	f000 b811 	b.w	8002fe0 <__retarget_lock_acquire_recursive>
 8002fbe:	bf00      	nop
 8002fc0:	20000524 	.word	0x20000524

08002fc4 <__malloc_unlock>:
 8002fc4:	4801      	ldr	r0, [pc, #4]	; (8002fcc <__malloc_unlock+0x8>)
 8002fc6:	f000 b80c 	b.w	8002fe2 <__retarget_lock_release_recursive>
 8002fca:	bf00      	nop
 8002fcc:	20000524 	.word	0x20000524

08002fd0 <_malloc_usable_size_r>:
 8002fd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fd4:	1f18      	subs	r0, r3, #4
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	bfbc      	itt	lt
 8002fda:	580b      	ldrlt	r3, [r1, r0]
 8002fdc:	18c0      	addlt	r0, r0, r3
 8002fde:	4770      	bx	lr

08002fe0 <__retarget_lock_acquire_recursive>:
 8002fe0:	4770      	bx	lr

08002fe2 <__retarget_lock_release_recursive>:
 8002fe2:	4770      	bx	lr

08002fe4 <_init>:
 8002fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fe6:	bf00      	nop
 8002fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fea:	bc08      	pop	{r3}
 8002fec:	469e      	mov	lr, r3
 8002fee:	4770      	bx	lr

08002ff0 <_fini>:
 8002ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ff2:	bf00      	nop
 8002ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ff6:	bc08      	pop	{r3}
 8002ff8:	469e      	mov	lr, r3
 8002ffa:	4770      	bx	lr
